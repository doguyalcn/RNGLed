
blinkkled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080b8  080080b8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080080b8  080080b8  000180b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080c0  080080c0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080c0  080080c0  000180c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080080c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000093c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009b8  200009b8  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016810  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000374c  00000000  00000000  000368ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011d0  00000000  00000000  0003a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dbc  00000000  00000000  0003b220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023033  00000000  00000000  0003bfdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017fdd  00000000  00000000  0005f00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb9a6  00000000  00000000  00076fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004de4  00000000  00000000  00142994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00147778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008084 	.word	0x08008084

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008084 	.word	0x08008084

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fc26 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f830 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f926 	bl	8000720 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f896 	bl	8000604 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8c2 	bl	8000660 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f007 f97e 	bl	80077dc <MX_USB_HOST_Init>
  MX_UART5_Init();
 80004e0:	f000 f8f4 	bl	80006cc <MX_UART5_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e4:	f007 f9a0 	bl	8007828 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80004e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ec:	480f      	ldr	r0, [pc, #60]	; (800052c <main+0x68>)
 80004ee:	f001 f802 	bl	80014f6 <HAL_GPIO_TogglePin>
    HAL_Delay (100);
 80004f2:	2064      	movs	r0, #100	; 0x64
 80004f4:	f000 fc82 	bl	8000dfc <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80004f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <main+0x68>)
 80004fe:	f000 fffa 	bl	80014f6 <HAL_GPIO_TogglePin>
    HAL_Delay (100);
 8000502:	2064      	movs	r0, #100	; 0x64
 8000504:	f000 fc7a 	bl	8000dfc <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <main+0x68>)
 800050e:	f000 fff2 	bl	80014f6 <HAL_GPIO_TogglePin>
    HAL_Delay (100);
 8000512:	2064      	movs	r0, #100	; 0x64
 8000514:	f000 fc72 	bl	8000dfc <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <main+0x68>)
 800051e:	f000 ffea 	bl	80014f6 <HAL_GPIO_TogglePin>
    HAL_Delay (100);
 8000522:	2064      	movs	r0, #100	; 0x64
 8000524:	f000 fc6a 	bl	8000dfc <HAL_Delay>
    MX_USB_HOST_Process();
 8000528:	e7dc      	b.n	80004e4 <main+0x20>
 800052a:	bf00      	nop
 800052c:	40020c00 	.word	0x40020c00

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f007 fd10 	bl	8007f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fd06 	bl	8002fc8 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 f9cb 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2105      	movs	r1, #5
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 ff67 	bl	80034b8 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f0:	f000 f9b4 	bl	800095c <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	; 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x50>)
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <MX_I2C1_Init+0x54>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x50>)
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_I2C1_Init+0x58>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_I2C1_Init+0x50>)
 8000622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_I2C1_Init+0x50>)
 8000642:	f002 fb7d 	bl	8002d40 <HAL_I2C_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 f986 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000098 	.word	0x20000098
 8000658:	40005400 	.word	0x40005400
 800065c:	000186a0 	.word	0x000186a0

08000660 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_SPI1_Init+0x64>)
 8000666:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <MX_SPI1_Init+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_SPI1_Init+0x64>)
 800066c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000670:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_SPI1_Init+0x64>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_SPI1_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_SPI1_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_SPI1_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_SPI1_Init+0x64>)
 800068c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000690:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_SPI1_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_SPI1_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_SPI1_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_SPI1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_SPI1_Init+0x64>)
 80006ac:	220a      	movs	r2, #10
 80006ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_SPI1_Init+0x64>)
 80006b2:	f003 f921 	bl	80038f8 <HAL_SPI_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006bc:	f000 f94e 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000ec 	.word	0x200000ec
 80006c8:	40013000 	.word	0x40013000

080006cc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_UART5_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_UART5_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_UART5_Init+0x4c>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_UART5_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_UART5_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_UART5_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_UART5_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_UART5_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_UART5_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_UART5_Init+0x4c>)
 8000704:	f003 f981 	bl	8003a0a <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 f925 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000144 	.word	0x20000144
 800071c:	40005000 	.word	0x40005000

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	4b82      	ldr	r3, [pc, #520]	; (8000944 <MX_GPIO_Init+0x224>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a81      	ldr	r2, [pc, #516]	; (8000944 <MX_GPIO_Init+0x224>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b7f      	ldr	r3, [pc, #508]	; (8000944 <MX_GPIO_Init+0x224>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	61bb      	str	r3, [r7, #24]
 8000750:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	4b7b      	ldr	r3, [pc, #492]	; (8000944 <MX_GPIO_Init+0x224>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a7a      	ldr	r2, [pc, #488]	; (8000944 <MX_GPIO_Init+0x224>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b78      	ldr	r3, [pc, #480]	; (8000944 <MX_GPIO_Init+0x224>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b74      	ldr	r3, [pc, #464]	; (8000944 <MX_GPIO_Init+0x224>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a73      	ldr	r2, [pc, #460]	; (8000944 <MX_GPIO_Init+0x224>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b71      	ldr	r3, [pc, #452]	; (8000944 <MX_GPIO_Init+0x224>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b6d      	ldr	r3, [pc, #436]	; (8000944 <MX_GPIO_Init+0x224>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a6c      	ldr	r2, [pc, #432]	; (8000944 <MX_GPIO_Init+0x224>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b6a      	ldr	r3, [pc, #424]	; (8000944 <MX_GPIO_Init+0x224>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b66      	ldr	r3, [pc, #408]	; (8000944 <MX_GPIO_Init+0x224>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a65      	ldr	r2, [pc, #404]	; (8000944 <MX_GPIO_Init+0x224>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b63      	ldr	r3, [pc, #396]	; (8000944 <MX_GPIO_Init+0x224>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b5f      	ldr	r3, [pc, #380]	; (8000944 <MX_GPIO_Init+0x224>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a5e      	ldr	r2, [pc, #376]	; (8000944 <MX_GPIO_Init+0x224>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b5c      	ldr	r3, [pc, #368]	; (8000944 <MX_GPIO_Init+0x224>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2108      	movs	r1, #8
 80007e2:	4859      	ldr	r0, [pc, #356]	; (8000948 <MX_GPIO_Init+0x228>)
 80007e4:	f000 fe6e 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2101      	movs	r1, #1
 80007ec:	4857      	ldr	r0, [pc, #348]	; (800094c <MX_GPIO_Init+0x22c>)
 80007ee:	f000 fe69 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f2:	2200      	movs	r2, #0
 80007f4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f8:	4855      	ldr	r0, [pc, #340]	; (8000950 <MX_GPIO_Init+0x230>)
 80007fa:	f000 fe63 	bl	80014c4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007fe:	2308      	movs	r3, #8
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	484c      	ldr	r0, [pc, #304]	; (8000948 <MX_GPIO_Init+0x228>)
 8000816:	f000 fcb9 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081a:	2301      	movs	r3, #1
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4846      	ldr	r0, [pc, #280]	; (800094c <MX_GPIO_Init+0x22c>)
 8000832:	f000 fcab 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000846:	2305      	movs	r3, #5
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	483e      	ldr	r0, [pc, #248]	; (800094c <MX_GPIO_Init+0x22c>)
 8000852:	f000 fc9b 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800085a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	483a      	ldr	r0, [pc, #232]	; (8000954 <MX_GPIO_Init+0x234>)
 800086c:	f000 fc8e 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000870:	2310      	movs	r3, #16
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000880:	2306      	movs	r3, #6
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4832      	ldr	r0, [pc, #200]	; (8000954 <MX_GPIO_Init+0x234>)
 800088c:	f000 fc7e 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000890:	2304      	movs	r3, #4
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	482d      	ldr	r0, [pc, #180]	; (8000958 <MX_GPIO_Init+0x238>)
 80008a4:	f000 fc72 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4824      	ldr	r0, [pc, #144]	; (8000958 <MX_GPIO_Init+0x238>)
 80008c6:	f000 fc61 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ca:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	481b      	ldr	r0, [pc, #108]	; (8000950 <MX_GPIO_Init+0x230>)
 80008e4:	f000 fc52 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin;
 80008e8:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fa:	2306      	movs	r3, #6
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4811      	ldr	r0, [pc, #68]	; (800094c <MX_GPIO_Init+0x22c>)
 8000906:	f000 fc41 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800090a:	2320      	movs	r3, #32
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_GPIO_Init+0x230>)
 800091e:	f000 fc35 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000922:	2302      	movs	r3, #2
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000926:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_GPIO_Init+0x228>)
 8000938:	f000 fc28 	bl	800118c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3730      	adds	r7, #48	; 0x30
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40021000 	.word	0x40021000
 800094c:	40020800 	.word	0x40020800
 8000950:	40020c00 	.word	0x40020c00
 8000954:	40020000 	.word	0x40020000
 8000958:	40020400 	.word	0x40020400

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <HAL_MspInit+0x4c>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x4c>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009a6:	2007      	movs	r0, #7
 80009a8:	f000 fb1c 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <HAL_I2C_MspInit+0x84>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d12c      	bne.n	8000a34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fc:	2312      	movs	r3, #18
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	480c      	ldr	r0, [pc, #48]	; (8000a44 <HAL_I2C_MspInit+0x8c>)
 8000a14:	f000 fbba 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 8000a22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a26:	6413      	str	r3, [r2, #64]	; 0x40
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020400 	.word	0x40020400

08000a48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_SPI_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12b      	bne.n	8000ac2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_SPI_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000aa2:	23e0      	movs	r3, #224	; 0xe0
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_SPI_MspInit+0x8c>)
 8000abe:	f000 fb65 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40013000 	.word	0x40013000
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a2c      	ldr	r2, [pc, #176]	; (8000ba8 <HAL_UART_MspInit+0xd0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d152      	bne.n	8000ba0 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <HAL_UART_MspInit+0xd4>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a2a      	ldr	r2, [pc, #168]	; (8000bac <HAL_UART_MspInit+0xd4>)
 8000b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b28      	ldr	r3, [pc, #160]	; (8000bac <HAL_UART_MspInit+0xd4>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b24      	ldr	r3, [pc, #144]	; (8000bac <HAL_UART_MspInit+0xd4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <HAL_UART_MspInit+0xd4>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <HAL_UART_MspInit+0xd4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <HAL_UART_MspInit+0xd4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <HAL_UART_MspInit+0xd4>)
 8000b3c:	f043 0308 	orr.w	r3, r3, #8
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <HAL_UART_MspInit+0xd4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b60:	2308      	movs	r3, #8
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <HAL_UART_MspInit+0xd8>)
 8000b6c:	f000 fb0e 	bl	800118c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b70:	2304      	movs	r3, #4
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b80:	2308      	movs	r3, #8
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <HAL_UART_MspInit+0xdc>)
 8000b8c:	f000 fafe 	bl	800118c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	2035      	movs	r0, #53	; 0x35
 8000b96:	f000 fa30 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000b9a:	2035      	movs	r0, #53	; 0x35
 8000b9c:	f000 fa49 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40005000 	.word	0x40005000
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020c00 	.word	0x40020c00

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f8da 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <UART5_IRQHandler+0x10>)
 8000c12:	f002 ff47 	bl	8003aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000144 	.word	0x20000144

08000c20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <OTG_FS_IRQHandler+0x10>)
 8000c26:	f000 feeb 	bl	8001a00 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000056c 	.word	0x2000056c

08000c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <_sbrk+0x5c>)
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <_sbrk+0x60>)
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <_sbrk+0x64>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <_sbrk+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d207      	bcs.n	8000c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c64:	f007 f996 	bl	8007f94 <__errno>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e009      	b.n	8000c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <_sbrk+0x64>)
 8000c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20020000 	.word	0x20020000
 8000c94:	00000400 	.word	0x00000400
 8000c98:	20000188 	.word	0x20000188
 8000c9c:	200009b8 	.word	0x200009b8

08000ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cca:	490e      	ldr	r1, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce0:	4c0b      	ldr	r4, [pc, #44]	; (8000d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cee:	f7ff ffd7 	bl	8000ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f007 f955 	bl	8007fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fbe5 	bl	80004c4 <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d08:	080080c8 	.word	0x080080c8
  ldr r2, =_sbss
 8000d0c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d10:	200009b8 	.word	0x200009b8

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f94f 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fe0c 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f967 	bl	800104e <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 f92f 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	2000018c 	.word	0x2000018c

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	2000018c 	.word	0x2000018c

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <__NVIC_EnableIRQ+0x38>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff29 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff3e 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff31 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffa2 	bl	8000fa0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff feb6 	bl	8000de4 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d008      	beq.n	8001098 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e052      	b.n	800113e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0216 	bic.w	r2, r2, #22
 80010a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	695a      	ldr	r2, [r3, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d103      	bne.n	80010c8 <HAL_DMA_Abort+0x62>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d007      	beq.n	80010d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0208 	bic.w	r2, r2, #8
 80010d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e8:	e013      	b.n	8001112 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ea:	f7ff fe7b 	bl	8000de4 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d90c      	bls.n	8001112 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2220      	movs	r2, #32
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2203      	movs	r2, #3
 8001102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e015      	b.n	800113e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1e4      	bne.n	80010ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001124:	223f      	movs	r2, #63	; 0x3f
 8001126:	409a      	lsls	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d004      	beq.n	8001164 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e00c      	b.n	800117e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2205      	movs	r2, #5
 8001168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0201 	bic.w	r2, r2, #1
 800117a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e16b      	b.n	8001480 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 815a 	bne.w	800147a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80b4 	beq.w	800147a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b60      	ldr	r3, [pc, #384]	; (8001498 <HAL_GPIO_Init+0x30c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a5f      	ldr	r2, [pc, #380]	; (8001498 <HAL_GPIO_Init+0x30c>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b5d      	ldr	r3, [pc, #372]	; (8001498 <HAL_GPIO_Init+0x30c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a5b      	ldr	r2, [pc, #364]	; (800149c <HAL_GPIO_Init+0x310>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a52      	ldr	r2, [pc, #328]	; (80014a0 <HAL_GPIO_Init+0x314>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d02b      	beq.n	80013b2 <HAL_GPIO_Init+0x226>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a51      	ldr	r2, [pc, #324]	; (80014a4 <HAL_GPIO_Init+0x318>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x222>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a50      	ldr	r2, [pc, #320]	; (80014a8 <HAL_GPIO_Init+0x31c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x21e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4f      	ldr	r2, [pc, #316]	; (80014ac <HAL_GPIO_Init+0x320>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x21a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4e      	ldr	r2, [pc, #312]	; (80014b0 <HAL_GPIO_Init+0x324>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x216>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4d      	ldr	r2, [pc, #308]	; (80014b4 <HAL_GPIO_Init+0x328>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x212>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <HAL_GPIO_Init+0x32c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x20e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4b      	ldr	r2, [pc, #300]	; (80014bc <HAL_GPIO_Init+0x330>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x20a>
 8001392:	2307      	movs	r3, #7
 8001394:	e00e      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 8001396:	2308      	movs	r3, #8
 8001398:	e00c      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 800139a:	2306      	movs	r3, #6
 800139c:	e00a      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 800139e:	2305      	movs	r3, #5
 80013a0:	e008      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013b2:	2300      	movs	r3, #0
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	4935      	ldr	r1, [pc, #212]	; (800149c <HAL_GPIO_Init+0x310>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <HAL_GPIO_Init+0x334>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f6:	4a32      	ldr	r2, [pc, #200]	; (80014c0 <HAL_GPIO_Init+0x334>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013fc:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <HAL_GPIO_Init+0x334>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001420:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <HAL_GPIO_Init+0x334>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <HAL_GPIO_Init+0x334>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800144a:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_GPIO_Init+0x334>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_GPIO_Init+0x334>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001474:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <HAL_GPIO_Init+0x334>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	f67f ae90 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40013800 	.word	0x40013800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40021400 	.word	0x40021400
 80014b8:	40021800 	.word	0x40021800
 80014bc:	40021c00 	.word	0x40021c00
 80014c0:	40013c00 	.word	0x40013c00

080014c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
 80014d0:	4613      	mov	r3, r2
 80014d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e0:	e003      	b.n	80014ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	041a      	lsls	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b085      	sub	sp, #20
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001508:	887a      	ldrh	r2, [r7, #2]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4013      	ands	r3, r2
 800150e:	041a      	lsls	r2, r3, #16
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43d9      	mvns	r1, r3
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	400b      	ands	r3, r1
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	619a      	str	r2, [r3, #24]
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800152a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152c:	b08f      	sub	sp, #60	; 0x3c
 800152e:	af0a      	add	r7, sp, #40	; 0x28
 8001530:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e054      	b.n	80015e6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d106      	bne.n	800155c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f006 f99e 	bl	8007898 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2203      	movs	r2, #3
 8001560:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f003 f9ca 	bl	8004914 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	687e      	ldr	r6, [r7, #4]
 8001588:	466d      	mov	r5, sp
 800158a:	f106 0410 	add.w	r4, r6, #16
 800158e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001596:	e894 0003 	ldmia.w	r4, {r0, r1}
 800159a:	e885 0003 	stmia.w	r5, {r0, r1}
 800159e:	1d33      	adds	r3, r6, #4
 80015a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a2:	6838      	ldr	r0, [r7, #0]
 80015a4:	f003 f944 	bl	8004830 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 f9c1 	bl	8004936 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	687e      	ldr	r6, [r7, #4]
 80015bc:	466d      	mov	r5, sp
 80015be:	f106 0410 	add.w	r4, r6, #16
 80015c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80015d2:	1d33      	adds	r3, r6, #4
 80015d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	f003 fb4a 	bl	8004c70 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015ee <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015ee:	b590      	push	{r4, r7, lr}
 80015f0:	b089      	sub	sp, #36	; 0x24
 80015f2:	af04      	add	r7, sp, #16
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	4608      	mov	r0, r1
 80015f8:	4611      	mov	r1, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	70fb      	strb	r3, [r7, #3]
 8001600:	460b      	mov	r3, r1
 8001602:	70bb      	strb	r3, [r7, #2]
 8001604:	4613      	mov	r3, r2
 8001606:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_HCD_HC_Init+0x28>
 8001612:	2302      	movs	r3, #2
 8001614:	e076      	b.n	8001704 <HAL_HCD_HC_Init+0x116>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	212c      	movs	r1, #44	; 0x2c
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	4413      	add	r3, r2
 800162a:	333d      	adds	r3, #61	; 0x3d
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	212c      	movs	r1, #44	; 0x2c
 8001636:	fb01 f303 	mul.w	r3, r1, r3
 800163a:	4413      	add	r3, r2
 800163c:	3338      	adds	r3, #56	; 0x38
 800163e:	787a      	ldrb	r2, [r7, #1]
 8001640:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	212c      	movs	r1, #44	; 0x2c
 8001648:	fb01 f303 	mul.w	r3, r1, r3
 800164c:	4413      	add	r3, r2
 800164e:	3340      	adds	r3, #64	; 0x40
 8001650:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001652:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	212c      	movs	r1, #44	; 0x2c
 800165a:	fb01 f303 	mul.w	r3, r1, r3
 800165e:	4413      	add	r3, r2
 8001660:	3339      	adds	r3, #57	; 0x39
 8001662:	78fa      	ldrb	r2, [r7, #3]
 8001664:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	212c      	movs	r1, #44	; 0x2c
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	4413      	add	r3, r2
 8001672:	333f      	adds	r3, #63	; 0x3f
 8001674:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001678:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	78ba      	ldrb	r2, [r7, #2]
 800167e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001682:	b2d0      	uxtb	r0, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	212c      	movs	r1, #44	; 0x2c
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	4413      	add	r3, r2
 800168e:	333a      	adds	r3, #58	; 0x3a
 8001690:	4602      	mov	r2, r0
 8001692:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001694:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001698:	2b00      	cmp	r3, #0
 800169a:	da09      	bge.n	80016b0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	212c      	movs	r1, #44	; 0x2c
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	333b      	adds	r3, #59	; 0x3b
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	e008      	b.n	80016c2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	212c      	movs	r1, #44	; 0x2c
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	333b      	adds	r3, #59	; 0x3b
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	212c      	movs	r1, #44	; 0x2c
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	333c      	adds	r3, #60	; 0x3c
 80016d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016d4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	787c      	ldrb	r4, [r7, #1]
 80016dc:	78ba      	ldrb	r2, [r7, #2]
 80016de:	78f9      	ldrb	r1, [r7, #3]
 80016e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	4623      	mov	r3, r4
 80016f2:	f003 fc43 	bl	8004f7c <USB_HC_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bd90      	pop	{r4, r7, pc}

0800170c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_HCD_HC_Halt+0x1e>
 8001726:	2302      	movs	r3, #2
 8001728:	e00f      	b.n	800174a <HAL_HCD_HC_Halt+0x3e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fe93 	bl	8005466 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	4608      	mov	r0, r1
 800175e:	4611      	mov	r1, r2
 8001760:	461a      	mov	r2, r3
 8001762:	4603      	mov	r3, r0
 8001764:	70fb      	strb	r3, [r7, #3]
 8001766:	460b      	mov	r3, r1
 8001768:	70bb      	strb	r3, [r7, #2]
 800176a:	4613      	mov	r3, r2
 800176c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	212c      	movs	r1, #44	; 0x2c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	333b      	adds	r3, #59	; 0x3b
 800177c:	78ba      	ldrb	r2, [r7, #2]
 800177e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	212c      	movs	r1, #44	; 0x2c
 8001786:	fb01 f303 	mul.w	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	333f      	adds	r3, #63	; 0x3f
 800178e:	787a      	ldrb	r2, [r7, #1]
 8001790:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001792:	7c3b      	ldrb	r3, [r7, #16]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d112      	bne.n	80017be <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	212c      	movs	r1, #44	; 0x2c
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	3342      	adds	r3, #66	; 0x42
 80017a6:	2203      	movs	r2, #3
 80017a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	212c      	movs	r1, #44	; 0x2c
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	333d      	adds	r3, #61	; 0x3d
 80017b8:	7f3a      	ldrb	r2, [r7, #28]
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e008      	b.n	80017d0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	3342      	adds	r3, #66	; 0x42
 80017cc:	2202      	movs	r2, #2
 80017ce:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	f200 80c6 	bhi.w	8001964 <HAL_HCD_HC_SubmitRequest+0x210>
 80017d8:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017de:	bf00      	nop
 80017e0:	080017f1 	.word	0x080017f1
 80017e4:	08001951 	.word	0x08001951
 80017e8:	08001855 	.word	0x08001855
 80017ec:	080018d3 	.word	0x080018d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017f0:	7c3b      	ldrb	r3, [r7, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	f040 80b8 	bne.w	8001968 <HAL_HCD_HC_SubmitRequest+0x214>
 80017f8:	78bb      	ldrb	r3, [r7, #2]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 80b4 	bne.w	8001968 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001800:	8b3b      	ldrh	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d108      	bne.n	8001818 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	212c      	movs	r1, #44	; 0x2c
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	4413      	add	r3, r2
 8001812:	3355      	adds	r3, #85	; 0x55
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	212c      	movs	r1, #44	; 0x2c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	3355      	adds	r3, #85	; 0x55
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3342      	adds	r3, #66	; 0x42
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800183e:	e093      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3342      	adds	r3, #66	; 0x42
 800184e:	2202      	movs	r2, #2
 8001850:	701a      	strb	r2, [r3, #0]
      break;
 8001852:	e089      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001854:	78bb      	ldrb	r3, [r7, #2]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d11d      	bne.n	8001896 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3355      	adds	r3, #85	; 0x55
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	212c      	movs	r1, #44	; 0x2c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	3342      	adds	r3, #66	; 0x42
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001880:	e073      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	212c      	movs	r1, #44	; 0x2c
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	3342      	adds	r3, #66	; 0x42
 8001890:	2202      	movs	r2, #2
 8001892:	701a      	strb	r2, [r3, #0]
      break;
 8001894:	e069      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	212c      	movs	r1, #44	; 0x2c
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	3354      	adds	r3, #84	; 0x54
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	3342      	adds	r3, #66	; 0x42
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
      break;
 80018bc:	e055      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	; 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	3342      	adds	r3, #66	; 0x42
 80018cc:	2202      	movs	r2, #2
 80018ce:	701a      	strb	r2, [r3, #0]
      break;
 80018d0:	e04b      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018d2:	78bb      	ldrb	r3, [r7, #2]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d11d      	bne.n	8001914 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3355      	adds	r3, #85	; 0x55
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	3342      	adds	r3, #66	; 0x42
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018fe:	e034      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	3342      	adds	r3, #66	; 0x42
 800190e:	2202      	movs	r2, #2
 8001910:	701a      	strb	r2, [r3, #0]
      break;
 8001912:	e02a      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	212c      	movs	r1, #44	; 0x2c
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	3354      	adds	r3, #84	; 0x54
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3342      	adds	r3, #66	; 0x42
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
      break;
 800193a:	e016      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3342      	adds	r3, #66	; 0x42
 800194a:	2202      	movs	r2, #2
 800194c:	701a      	strb	r2, [r3, #0]
      break;
 800194e:	e00c      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3342      	adds	r3, #66	; 0x42
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
      break;
 8001962:	e002      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001964:	bf00      	nop
 8001966:	e000      	b.n	800196a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001968:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	212c      	movs	r1, #44	; 0x2c
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	3344      	adds	r3, #68	; 0x44
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	8b3a      	ldrh	r2, [r7, #24]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	202c      	movs	r0, #44	; 0x2c
 8001984:	fb00 f303 	mul.w	r3, r0, r3
 8001988:	440b      	add	r3, r1
 800198a:	334c      	adds	r3, #76	; 0x4c
 800198c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	3360      	adds	r3, #96	; 0x60
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3350      	adds	r3, #80	; 0x50
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	3339      	adds	r3, #57	; 0x39
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	212c      	movs	r1, #44	; 0x2c
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	3361      	adds	r3, #97	; 0x61
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	222c      	movs	r2, #44	; 0x2c
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	3338      	adds	r3, #56	; 0x38
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	18d1      	adds	r1, r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	f003 fbe6 	bl	80051c0 <USB_HC_StartXfer>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop

08001a00 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 f8e7 	bl	8004bea <USB_GetMode>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	f040 80f6 	bne.w	8001c10 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 f8cb 	bl	8004bc4 <USB_ReadInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80ec 	beq.w	8001c0e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 f8c2 	bl	8004bc4 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a4a:	d104      	bne.n	8001a56 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 f8b2 	bl	8004bc4 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a6a:	d104      	bne.n	8001a76 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 f8a2 	bl	8004bc4 <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a8a:	d104      	bne.n	8001a96 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 f892 	bl	8004bc4 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d103      	bne.n	8001ab2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 f884 	bl	8004bc4 <USB_ReadInterrupts>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ac6:	d11c      	bne.n	8001b02 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ad0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10f      	bne.n	8001b02 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ae2:	2110      	movs	r1, #16
 8001ae4:	6938      	ldr	r0, [r7, #16]
 8001ae6:	f002 ff73 	bl	80049d0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001aea:	6938      	ldr	r0, [r7, #16]
 8001aec:	f002 ffa4 	bl	8004a38 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2101      	movs	r1, #1
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 f97a 	bl	8004df0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f005 ff49 	bl	8007994 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 f85c 	bl	8004bc4 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b16:	d102      	bne.n	8001b1e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f001 f89e 	bl	8002c5a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 f84e 	bl	8004bc4 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d106      	bne.n	8001b40 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f005 ff12 	bl	800795c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 f83d 	bl	8004bc4 <USB_ReadInterrupts>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d101      	bne.n	8001b58 <HAL_HCD_IRQHandler+0x158>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_HCD_IRQHandler+0x15a>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d012      	beq.n	8001b84 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0210 	bic.w	r2, r2, #16
 8001b6c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 ffa1 	bl	8002ab6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0210 	orr.w	r2, r2, #16
 8001b82:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 f81b 	bl	8004bc4 <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b98:	d13a      	bne.n	8001c10 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fc50 	bl	8005444 <USB_HC_ReadInterrupt>
 8001ba4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e025      	b.n	8001bf8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d018      	beq.n	8001bf2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	015a      	lsls	r2, r3, #5
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd6:	d106      	bne.n	8001be6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8ab 	bl	8001d3a <HCD_HC_IN_IRQHandler>
 8001be4:	e005      	b.n	8001bf2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	4619      	mov	r1, r3
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fbf9 	bl	80023e4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d3d4      	bcc.n	8001bac <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0a:	615a      	str	r2, [r3, #20]
 8001c0c:	e000      	b.n	8001c10 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c0e:	bf00      	nop
    }
  }
}
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_HCD_Start+0x16>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e013      	b.n	8001c54 <HAL_HCD_Start+0x3e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 f93c 	bl	8004eb8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 fe54 	bl	80048f2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_HCD_Stop+0x16>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e00d      	b.n	8001c8e <HAL_HCD_Stop+0x32>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 fd2a 	bl	80056d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 f8de 	bl	8004e64 <USB_ResetPort>
 8001ca8:	4603      	mov	r3, r0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	212c      	movs	r1, #44	; 0x2c
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3360      	adds	r3, #96	; 0x60
 8001ccc:	781b      	ldrb	r3, [r3, #0]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	212c      	movs	r1, #44	; 0x2c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3350      	adds	r3, #80	; 0x50
 8001cf4:	681b      	ldr	r3, [r3, #0]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 f922 	bl	8004f58 <USB_GetCurrentFrame>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 f8fd 	bl	8004f2a <USB_GetHostSpeed>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d11a      	bne.n	8001da0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	461a      	mov	r2, r3
 8001d78:	2304      	movs	r3, #4
 8001d7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	212c      	movs	r1, #44	; 0x2c
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	3361      	adds	r3, #97	; 0x61
 8001d8a:	2206      	movs	r2, #6
 8001d8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 fb64 	bl	8005466 <USB_HC_Halt>
 8001d9e:	e0af      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db6:	d11b      	bne.n	8001df0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	212c      	movs	r1, #44	; 0x2c
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3361      	adds	r3, #97	; 0x61
 8001dda:	2207      	movs	r2, #7
 8001ddc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fb3c 	bl	8005466 <USB_HC_Halt>
 8001dee:	e087      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	d109      	bne.n	8001e1a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	461a      	mov	r2, r3
 8001e14:	2320      	movs	r3, #32
 8001e16:	6093      	str	r3, [r2, #8]
 8001e18:	e072      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d11a      	bne.n	8001e66 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2308      	movs	r3, #8
 8001e40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	212c      	movs	r1, #44	; 0x2c
 8001e48:	fb01 f303 	mul.w	r3, r1, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3361      	adds	r3, #97	; 0x61
 8001e50:	2205      	movs	r2, #5
 8001e52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 fb01 	bl	8005466 <USB_HC_Halt>
 8001e64:	e04c      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7c:	d11b      	bne.n	8001eb6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	212c      	movs	r1, #44	; 0x2c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3361      	adds	r3, #97	; 0x61
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fad9 	bl	8005466 <USB_HC_Halt>
 8001eb4:	e024      	b.n	8001f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b80      	cmp	r3, #128	; 0x80
 8001eca:	d119      	bne.n	8001f00 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	015a      	lsls	r2, r3, #5
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	212c      	movs	r1, #44	; 0x2c
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	3361      	adds	r3, #97	; 0x61
 8001eec:	2206      	movs	r2, #6
 8001eee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 fab3 	bl	8005466 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f16:	d112      	bne.n	8001f3e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fa9f 	bl	8005466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	461a      	mov	r2, r3
 8001f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f3a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f3c:	e24e      	b.n	80023dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	015a      	lsls	r2, r3, #5
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	f040 80df 	bne.w	8002114 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d019      	beq.n	8001f92 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	212c      	movs	r1, #44	; 0x2c
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	3348      	adds	r3, #72	; 0x48
 8001f6c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	0159      	lsls	r1, r3, #5
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	440b      	add	r3, r1
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f80:	1ad2      	subs	r2, r2, r3
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	202c      	movs	r0, #44	; 0x2c
 8001f88:	fb00 f303 	mul.w	r3, r0, r3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3350      	adds	r3, #80	; 0x50
 8001f90:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3361      	adds	r3, #97	; 0x61
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	212c      	movs	r1, #44	; 0x2c
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	335c      	adds	r3, #92	; 0x5c
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	333f      	adds	r3, #63	; 0x3f
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	333f      	adds	r3, #63	; 0x3f
 8001fea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d111      	bne.n	8002014 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 fa33 	bl	8005466 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	461a      	mov	r2, r3
 800200e:	2310      	movs	r3, #16
 8002010:	6093      	str	r3, [r2, #8]
 8002012:	e03a      	b.n	800208a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	333f      	adds	r3, #63	; 0x3f
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d009      	beq.n	800203c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	333f      	adds	r3, #63	; 0x3f
 8002036:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002038:	2b01      	cmp	r3, #1
 800203a:	d126      	bne.n	800208a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	0151      	lsls	r1, r2, #5
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	440a      	add	r2, r1
 8002052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002056:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800205a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	212c      	movs	r1, #44	; 0x2c
 8002062:	fb01 f303 	mul.w	r3, r1, r3
 8002066:	4413      	add	r3, r2
 8002068:	3360      	adds	r3, #96	; 0x60
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	b2d9      	uxtb	r1, r3
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	202c      	movs	r0, #44	; 0x2c
 8002078:	fb00 f303 	mul.w	r3, r0, r3
 800207c:	4413      	add	r3, r2
 800207e:	3360      	adds	r3, #96	; 0x60
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f005 fc93 	bl	80079b0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d12b      	bne.n	80020ea <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3348      	adds	r3, #72	; 0x48
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	202c      	movs	r0, #44	; 0x2c
 80020a8:	fb00 f202 	mul.w	r2, r0, r2
 80020ac:	440a      	add	r2, r1
 80020ae:	3240      	adds	r2, #64	; 0x40
 80020b0:	8812      	ldrh	r2, [r2, #0]
 80020b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 818e 	beq.w	80023dc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3354      	adds	r3, #84	; 0x54
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	f083 0301 	eor.w	r3, r3, #1
 80020d4:	b2d8      	uxtb	r0, r3
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3354      	adds	r3, #84	; 0x54
 80020e4:	4602      	mov	r2, r0
 80020e6:	701a      	strb	r2, [r3, #0]
}
 80020e8:	e178      	b.n	80023dc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3354      	adds	r3, #84	; 0x54
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f083 0301 	eor.w	r3, r3, #1
 80020fe:	b2d8      	uxtb	r0, r3
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	212c      	movs	r1, #44	; 0x2c
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	3354      	adds	r3, #84	; 0x54
 800210e:	4602      	mov	r2, r0
 8002110:	701a      	strb	r2, [r3, #0]
}
 8002112:	e163      	b.n	80023dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b02      	cmp	r3, #2
 8002128:	f040 80f6 	bne.w	8002318 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	212c      	movs	r1, #44	; 0x2c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	3361      	adds	r3, #97	; 0x61
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d109      	bne.n	8002154 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3360      	adds	r3, #96	; 0x60
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e0c9      	b.n	80022e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	3361      	adds	r3, #97	; 0x61
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d109      	bne.n	800217c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	212c      	movs	r1, #44	; 0x2c
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	3360      	adds	r3, #96	; 0x60
 8002176:	2205      	movs	r2, #5
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e0b5      	b.n	80022e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3361      	adds	r3, #97	; 0x61
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b06      	cmp	r3, #6
 800218e:	d009      	beq.n	80021a4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	3361      	adds	r3, #97	; 0x61
 800219e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d150      	bne.n	8002246 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	335c      	adds	r3, #92	; 0x5c
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	202c      	movs	r0, #44	; 0x2c
 80021bc:	fb00 f303 	mul.w	r3, r0, r3
 80021c0:	440b      	add	r3, r1
 80021c2:	335c      	adds	r3, #92	; 0x5c
 80021c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	335c      	adds	r3, #92	; 0x5c
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d912      	bls.n	8002200 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	335c      	adds	r3, #92	; 0x5c
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3360      	adds	r3, #96	; 0x60
 80021fa:	2204      	movs	r2, #4
 80021fc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021fe:	e073      	b.n	80022e8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3360      	adds	r3, #96	; 0x60
 800220e:	2202      	movs	r2, #2
 8002210:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002228:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002230:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002244:	e050      	b.n	80022e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	3361      	adds	r3, #97	; 0x61
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d122      	bne.n	80022a0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	3360      	adds	r3, #96	; 0x60
 8002268:	2202      	movs	r2, #2
 800226a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	015a      	lsls	r2, r3, #5
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4413      	add	r3, r2
 8002274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002282:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800228a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e023      	b.n	80022e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3361      	adds	r3, #97	; 0x61
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b07      	cmp	r3, #7
 80022b2:	d119      	bne.n	80022e8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	212c      	movs	r1, #44	; 0x2c
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	4413      	add	r3, r2
 80022c0:	335c      	adds	r3, #92	; 0x5c
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	202c      	movs	r0, #44	; 0x2c
 80022cc:	fb00 f303 	mul.w	r3, r0, r3
 80022d0:	440b      	add	r3, r1
 80022d2:	335c      	adds	r3, #92	; 0x5c
 80022d4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	212c      	movs	r1, #44	; 0x2c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	3360      	adds	r3, #96	; 0x60
 80022e4:	2204      	movs	r2, #4
 80022e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f4:	461a      	mov	r2, r3
 80022f6:	2302      	movs	r3, #2
 80022f8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	b2d9      	uxtb	r1, r3
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	202c      	movs	r0, #44	; 0x2c
 8002304:	fb00 f303 	mul.w	r3, r0, r3
 8002308:	4413      	add	r3, r2
 800230a:	3360      	adds	r3, #96	; 0x60
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f005 fb4d 	bl	80079b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002316:	e061      	b.n	80023dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b10      	cmp	r3, #16
 800232c:	d156      	bne.n	80023dc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	333f      	adds	r3, #63	; 0x3f
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d111      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	335c      	adds	r3, #92	; 0x5c
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f003 f881 	bl	8005466 <USB_HC_Halt>
 8002364:	e031      	b.n	80023ca <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	212c      	movs	r1, #44	; 0x2c
 800236c:	fb01 f303 	mul.w	r3, r1, r3
 8002370:	4413      	add	r3, r2
 8002372:	333f      	adds	r3, #63	; 0x3f
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	333f      	adds	r3, #63	; 0x3f
 8002388:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800238a:	2b02      	cmp	r3, #2
 800238c:	d11d      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	335c      	adds	r3, #92	; 0x5c
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d110      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3361      	adds	r3, #97	; 0x61
 80023b6:	2203      	movs	r2, #3
 80023b8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 f84e 	bl	8005466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	461a      	mov	r2, r3
 80023d8:	2310      	movs	r3, #16
 80023da:	6093      	str	r3, [r2, #8]
}
 80023dc:	bf00      	nop
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4413      	add	r3, r2
 8002406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b04      	cmp	r3, #4
 8002412:	d11a      	bne.n	800244a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002420:	461a      	mov	r2, r3
 8002422:	2304      	movs	r3, #4
 8002424:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	3361      	adds	r3, #97	; 0x61
 8002434:	2206      	movs	r2, #6
 8002436:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f003 f80f 	bl	8005466 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002448:	e331      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b20      	cmp	r3, #32
 800245e:	d12e      	bne.n	80024be <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	461a      	mov	r2, r3
 800246e:	2320      	movs	r3, #32
 8002470:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	333d      	adds	r3, #61	; 0x3d
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	f040 8313 	bne.w	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	333d      	adds	r3, #61	; 0x3d
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3360      	adds	r3, #96	; 0x60
 80024a8:	2202      	movs	r2, #2
 80024aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f002 ffd5 	bl	8005466 <USB_HC_Halt>
}
 80024bc:	e2f7      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d4:	d112      	bne.n	80024fc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	461a      	mov	r2, r3
 80024e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 ffb6 	bl	8005466 <USB_HC_Halt>
}
 80024fa:	e2d8      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d140      	bne.n	8002594 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	335c      	adds	r3, #92	; 0x5c
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	2b40      	cmp	r3, #64	; 0x40
 8002538:	d111      	bne.n	800255e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	333d      	adds	r3, #61	; 0x3d
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	461a      	mov	r2, r3
 800255a:	2340      	movs	r3, #64	; 0x40
 800255c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4413      	add	r3, r2
 8002566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256a:	461a      	mov	r2, r3
 800256c:	2301      	movs	r3, #1
 800256e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	3361      	adds	r3, #97	; 0x61
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f002 ff6a 	bl	8005466 <USB_HC_Halt>
}
 8002592:	e28c      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	4413      	add	r3, r2
 800259c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d12c      	bne.n	8002604 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	3361      	adds	r3, #97	; 0x61
 80025b8:	2204      	movs	r2, #4
 80025ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	333d      	adds	r3, #61	; 0x3d
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	335c      	adds	r3, #92	; 0x5c
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 ff3b 	bl	8005466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	461a      	mov	r2, r3
 80025fe:	2340      	movs	r3, #64	; 0x40
 8002600:	6093      	str	r3, [r2, #8]
}
 8002602:	e254      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b08      	cmp	r3, #8
 8002618:	d11a      	bne.n	8002650 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	461a      	mov	r2, r3
 8002628:	2308      	movs	r3, #8
 800262a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	2205      	movs	r2, #5
 800263c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f002 ff0c 	bl	8005466 <USB_HC_Halt>
}
 800264e:	e22e      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b10      	cmp	r3, #16
 8002664:	d140      	bne.n	80026e8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	335c      	adds	r3, #92	; 0x5c
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3361      	adds	r3, #97	; 0x61
 8002686:	2203      	movs	r2, #3
 8002688:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	333d      	adds	r3, #61	; 0x3d
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d112      	bne.n	80026c4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	333c      	adds	r3, #60	; 0x3c
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d108      	bne.n	80026c4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	333d      	adds	r3, #61	; 0x3d
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 fec9 	bl	8005466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	461a      	mov	r2, r3
 80026e2:	2310      	movs	r3, #16
 80026e4:	6093      	str	r3, [r2, #8]
}
 80026e6:	e1e2      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fa:	2b80      	cmp	r3, #128	; 0x80
 80026fc:	d164      	bne.n	80027c8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d111      	bne.n	800272a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	3361      	adds	r3, #97	; 0x61
 8002714:	2206      	movs	r2, #6
 8002716:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fe9f 	bl	8005466 <USB_HC_Halt>
 8002728:	e044      	b.n	80027b4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	335c      	adds	r3, #92	; 0x5c
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	202c      	movs	r0, #44	; 0x2c
 8002742:	fb00 f303 	mul.w	r3, r0, r3
 8002746:	440b      	add	r3, r1
 8002748:	335c      	adds	r3, #92	; 0x5c
 800274a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	212c      	movs	r1, #44	; 0x2c
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	335c      	adds	r3, #92	; 0x5c
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d920      	bls.n	80027a2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	335c      	adds	r3, #92	; 0x5c
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	3360      	adds	r3, #96	; 0x60
 8002780:	2204      	movs	r2, #4
 8002782:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	b2d9      	uxtb	r1, r3
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	202c      	movs	r0, #44	; 0x2c
 800278e:	fb00 f303 	mul.w	r3, r0, r3
 8002792:	4413      	add	r3, r2
 8002794:	3360      	adds	r3, #96	; 0x60
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f005 f908 	bl	80079b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027a0:	e008      	b.n	80027b4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3360      	adds	r3, #96	; 0x60
 80027b0:	2202      	movs	r2, #2
 80027b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	461a      	mov	r2, r3
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	6093      	str	r3, [r2, #8]
}
 80027c6:	e172      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027de:	d11b      	bne.n	8002818 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	3361      	adds	r3, #97	; 0x61
 80027ee:	2208      	movs	r2, #8
 80027f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f002 fe32 	bl	8005466 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4413      	add	r3, r2
 800280a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280e:	461a      	mov	r2, r3
 8002810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002814:	6093      	str	r3, [r2, #8]
}
 8002816:	e14a      	b.n	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b02      	cmp	r3, #2
 800282c:	f040 813f 	bne.w	8002aae <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	3361      	adds	r3, #97	; 0x61
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d17d      	bne.n	8002940 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3360      	adds	r3, #96	; 0x60
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	333f      	adds	r3, #63	; 0x3f
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d00a      	beq.n	8002880 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	333f      	adds	r3, #63	; 0x3f
 8002878:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800287a:	2b03      	cmp	r3, #3
 800287c:	f040 8100 	bne.w	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d113      	bne.n	80028b0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3355      	adds	r3, #85	; 0x55
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	f083 0301 	eor.w	r3, r3, #1
 800289c:	b2d8      	uxtb	r0, r3
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3355      	adds	r3, #85	; 0x55
 80028ac:	4602      	mov	r2, r0
 80028ae:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	f040 80e3 	bne.w	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	334c      	adds	r3, #76	; 0x4c
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80d8 	beq.w	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	334c      	adds	r3, #76	; 0x4c
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	202c      	movs	r0, #44	; 0x2c
 80028e6:	fb00 f202 	mul.w	r2, r0, r2
 80028ea:	440a      	add	r2, r1
 80028ec:	3240      	adds	r2, #64	; 0x40
 80028ee:	8812      	ldrh	r2, [r2, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	202c      	movs	r0, #44	; 0x2c
 80028fa:	fb00 f202 	mul.w	r2, r0, r2
 80028fe:	440a      	add	r2, r1
 8002900:	3240      	adds	r2, #64	; 0x40
 8002902:	8812      	ldrh	r2, [r2, #0]
 8002904:	fbb3 f3f2 	udiv	r3, r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80b5 	beq.w	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3355      	adds	r3, #85	; 0x55
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	f083 0301 	eor.w	r3, r3, #1
 800292a:	b2d8      	uxtb	r0, r3
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3355      	adds	r3, #85	; 0x55
 800293a:	4602      	mov	r2, r0
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e09f      	b.n	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3361      	adds	r3, #97	; 0x61
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d109      	bne.n	8002968 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3360      	adds	r3, #96	; 0x60
 8002962:	2202      	movs	r2, #2
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e08b      	b.n	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3361      	adds	r3, #97	; 0x61
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d109      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3360      	adds	r3, #96	; 0x60
 800298a:	2202      	movs	r2, #2
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e077      	b.n	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3361      	adds	r3, #97	; 0x61
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d109      	bne.n	80029b8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3360      	adds	r3, #96	; 0x60
 80029b2:	2205      	movs	r2, #5
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e063      	b.n	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3361      	adds	r3, #97	; 0x61
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b06      	cmp	r3, #6
 80029ca:	d009      	beq.n	80029e0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3361      	adds	r3, #97	; 0x61
 80029da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d14f      	bne.n	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	335c      	adds	r3, #92	; 0x5c
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	202c      	movs	r0, #44	; 0x2c
 80029f8:	fb00 f303 	mul.w	r3, r0, r3
 80029fc:	440b      	add	r3, r1
 80029fe:	335c      	adds	r3, #92	; 0x5c
 8002a00:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	335c      	adds	r3, #92	; 0x5c
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d912      	bls.n	8002a3c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	335c      	adds	r3, #92	; 0x5c
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3360      	adds	r3, #96	; 0x60
 8002a36:	2204      	movs	r2, #4
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e021      	b.n	8002a80 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3360      	adds	r3, #96	; 0x60
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a64:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a6c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2302      	movs	r3, #2
 8002a90:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	b2d9      	uxtb	r1, r3
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	202c      	movs	r0, #44	; 0x2c
 8002a9c:	fb00 f303 	mul.w	r3, r0, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3360      	adds	r3, #96	; 0x60
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f004 ff81 	bl	80079b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002aae:	bf00      	nop
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b08a      	sub	sp, #40	; 0x28
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	0c5b      	lsrs	r3, r3, #17
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d004      	beq.n	8002afc <HCD_RXQLVL_IRQHandler+0x46>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	f000 80a9 	beq.w	8002c4c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002afa:	e0aa      	b.n	8002c52 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80a6 	beq.w	8002c50 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3344      	adds	r3, #68	; 0x44
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 809b 	beq.w	8002c50 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3350      	adds	r3, #80	; 0x50
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	441a      	add	r2, r3
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	202c      	movs	r0, #44	; 0x2c
 8002b34:	fb00 f303 	mul.w	r3, r0, r3
 8002b38:	440b      	add	r3, r1
 8002b3a:	334c      	adds	r3, #76	; 0x4c
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d87a      	bhi.n	8002c38 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3344      	adds	r3, #68	; 0x44
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	b292      	uxth	r2, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f001 ffda 	bl	8004b14 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3344      	adds	r3, #68	; 0x44
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	441a      	add	r2, r3
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	202c      	movs	r0, #44	; 0x2c
 8002b7a:	fb00 f303 	mul.w	r3, r0, r3
 8002b7e:	440b      	add	r3, r1
 8002b80:	3344      	adds	r3, #68	; 0x44
 8002b82:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3350      	adds	r3, #80	; 0x50
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	441a      	add	r2, r3
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	202c      	movs	r0, #44	; 0x2c
 8002b9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3350      	adds	r3, #80	; 0x50
 8002ba6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	0cdb      	lsrs	r3, r3, #19
 8002bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bbc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3340      	adds	r3, #64	; 0x40
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d13c      	bne.n	8002c50 <HCD_RXQLVL_IRQHandler+0x19a>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d039      	beq.n	8002c50 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bf2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bfa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3354      	adds	r3, #84	; 0x54
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	f083 0301 	eor.w	r3, r3, #1
 8002c22:	b2d8      	uxtb	r0, r3
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3354      	adds	r3, #84	; 0x54
 8002c32:	4602      	mov	r2, r0
 8002c34:	701a      	strb	r2, [r3, #0]
      break;
 8002c36:	e00b      	b.n	8002c50 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	212c      	movs	r1, #44	; 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3360      	adds	r3, #96	; 0x60
 8002c46:	2204      	movs	r2, #4
 8002c48:	701a      	strb	r2, [r3, #0]
      break;
 8002c4a:	e001      	b.n	8002c50 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c4c:	bf00      	nop
 8002c4e:	e000      	b.n	8002c52 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002c50:	bf00      	nop
  }
}
 8002c52:	bf00      	nop
 8002c54:	3728      	adds	r7, #40	; 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c86:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d10b      	bne.n	8002caa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d102      	bne.n	8002ca2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f004 fe6b 	bl	8007978 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d132      	bne.n	8002d1a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f043 0308 	orr.w	r3, r3, #8
 8002cba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d126      	bne.n	8002d14 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d113      	bne.n	8002cf6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002cd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cd8:	d106      	bne.n	8002ce8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2102      	movs	r1, #2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f002 f885 	bl	8004df0 <USB_InitFSLSPClkSel>
 8002ce6:	e011      	b.n	8002d0c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2101      	movs	r1, #1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f002 f87e 	bl	8004df0 <USB_InitFSLSPClkSel>
 8002cf4:	e00a      	b.n	8002d0c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d106      	bne.n	8002d0c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d04:	461a      	mov	r2, r3
 8002d06:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d0a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f004 fe5d 	bl	80079cc <HAL_HCD_PortEnabled_Callback>
 8002d12:	e002      	b.n	8002d1a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f004 fe67 	bl	80079e8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d103      	bne.n	8002d2c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f043 0320 	orr.w	r3, r3, #32
 8002d2a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d32:	461a      	mov	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	6013      	str	r3, [r2, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e12b      	b.n	8002faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7fd fe26 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	; 0x24
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002da4:	f000 fd80 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8002da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4a81      	ldr	r2, [pc, #516]	; (8002fb4 <HAL_I2C_Init+0x274>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d807      	bhi.n	8002dc4 <HAL_I2C_Init+0x84>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a80      	ldr	r2, [pc, #512]	; (8002fb8 <HAL_I2C_Init+0x278>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e006      	b.n	8002dd2 <HAL_I2C_Init+0x92>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a7d      	ldr	r2, [pc, #500]	; (8002fbc <HAL_I2C_Init+0x27c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	bf94      	ite	ls
 8002dcc:	2301      	movls	r3, #1
 8002dce:	2300      	movhi	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0e7      	b.n	8002faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a78      	ldr	r2, [pc, #480]	; (8002fc0 <HAL_I2C_Init+0x280>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0c9b      	lsrs	r3, r3, #18
 8002de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a6a      	ldr	r2, [pc, #424]	; (8002fb4 <HAL_I2C_Init+0x274>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d802      	bhi.n	8002e14 <HAL_I2C_Init+0xd4>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3301      	adds	r3, #1
 8002e12:	e009      	b.n	8002e28 <HAL_I2C_Init+0xe8>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a69      	ldr	r2, [pc, #420]	; (8002fc4 <HAL_I2C_Init+0x284>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	3301      	adds	r3, #1
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	495c      	ldr	r1, [pc, #368]	; (8002fb4 <HAL_I2C_Init+0x274>)
 8002e44:	428b      	cmp	r3, r1
 8002e46:	d819      	bhi.n	8002e7c <HAL_I2C_Init+0x13c>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e59      	subs	r1, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e56:	1c59      	adds	r1, r3, #1
 8002e58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e5c:	400b      	ands	r3, r1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_I2C_Init+0x138>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e59      	subs	r1, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e76:	e051      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e04f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <HAL_I2C_Init+0x168>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	440b      	add	r3, r1
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e012      	b.n	8002ece <HAL_I2C_Init+0x18e>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	0099      	lsls	r1, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Init+0x196>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e022      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10e      	bne.n	8002efc <HAL_I2C_Init+0x1bc>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1e58      	subs	r0, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	440b      	add	r3, r1
 8002eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efa:	e00f      	b.n	8002f1c <HAL_I2C_Init+0x1dc>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	0099      	lsls	r1, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	6809      	ldr	r1, [r1, #0]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6911      	ldr	r1, [r2, #16]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68d2      	ldr	r2, [r2, #12]
 8002f56:	4311      	orrs	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	000186a0 	.word	0x000186a0
 8002fb8:	001e847f 	.word	0x001e847f
 8002fbc:	003d08ff 	.word	0x003d08ff
 8002fc0:	431bde83 	.word	0x431bde83
 8002fc4:	10624dd3 	.word	0x10624dd3

08002fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e267      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d075      	beq.n	80030d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fe6:	4b88      	ldr	r3, [pc, #544]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d00c      	beq.n	800300c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff2:	4b85      	ldr	r3, [pc, #532]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d112      	bne.n	8003024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffe:	4b82      	ldr	r3, [pc, #520]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800300a:	d10b      	bne.n	8003024 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	4b7e      	ldr	r3, [pc, #504]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d05b      	beq.n	80030d0 <HAL_RCC_OscConfig+0x108>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d157      	bne.n	80030d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e242      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302c:	d106      	bne.n	800303c <HAL_RCC_OscConfig+0x74>
 800302e:	4b76      	ldr	r3, [pc, #472]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a75      	ldr	r2, [pc, #468]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e01d      	b.n	8003078 <HAL_RCC_OscConfig+0xb0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x98>
 8003046:	4b70      	ldr	r3, [pc, #448]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6f      	ldr	r2, [pc, #444]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800304c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	4b6d      	ldr	r3, [pc, #436]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6c      	ldr	r2, [pc, #432]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0xb0>
 8003060:	4b69      	ldr	r3, [pc, #420]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a68      	ldr	r2, [pc, #416]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4b66      	ldr	r3, [pc, #408]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a65      	ldr	r2, [pc, #404]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fd feb0 	bl	8000de4 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003088:	f7fd feac 	bl	8000de4 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e207      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0xc0>
 80030a6:	e014      	b.n	80030d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fd fe9c 	bl	8000de4 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fd fe98 	bl	8000de4 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1f3      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	4b51      	ldr	r3, [pc, #324]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0xe8>
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d063      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030de:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d11c      	bne.n	8003130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f6:	4b44      	ldr	r3, [pc, #272]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d116      	bne.n	8003130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_RCC_OscConfig+0x152>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d001      	beq.n	800311a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e1c7      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4937      	ldr	r1, [pc, #220]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	e03a      	b.n	80031a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003138:	4b34      	ldr	r3, [pc, #208]	; (800320c <HAL_RCC_OscConfig+0x244>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7fd fe51 	bl	8000de4 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003146:	f7fd fe4d 	bl	8000de4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e1a8      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003158:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003164:	4b28      	ldr	r3, [pc, #160]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4925      	ldr	r1, [pc, #148]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	e015      	b.n	80031a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_RCC_OscConfig+0x244>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fd fe30 	bl	8000de4 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003188:	f7fd fe2c 	bl	8000de4 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e187      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d036      	beq.n	8003220 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_RCC_OscConfig+0x248>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fd fe10 	bl	8000de4 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c8:	f7fd fe0c 	bl	8000de4 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e167      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x200>
 80031e6:	e01b      	b.n	8003220 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_OscConfig+0x248>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ee:	f7fd fdf9 	bl	8000de4 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f4:	e00e      	b.n	8003214 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f6:	f7fd fdf5 	bl	8000de4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d907      	bls.n	8003214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e150      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
 8003208:	40023800 	.word	0x40023800
 800320c:	42470000 	.word	0x42470000
 8003210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b88      	ldr	r3, [pc, #544]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ea      	bne.n	80031f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8097 	beq.w	800335c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003232:	4b81      	ldr	r3, [pc, #516]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	4b7d      	ldr	r3, [pc, #500]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	4a7c      	ldr	r2, [pc, #496]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324c:	6413      	str	r3, [r2, #64]	; 0x40
 800324e:	4b7a      	ldr	r3, [pc, #488]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4b77      	ldr	r3, [pc, #476]	; (800343c <HAL_RCC_OscConfig+0x474>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d118      	bne.n	800329c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326a:	4b74      	ldr	r3, [pc, #464]	; (800343c <HAL_RCC_OscConfig+0x474>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a73      	ldr	r2, [pc, #460]	; (800343c <HAL_RCC_OscConfig+0x474>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003276:	f7fd fdb5 	bl	8000de4 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327e:	f7fd fdb1 	bl	8000de4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e10c      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	4b6a      	ldr	r3, [pc, #424]	; (800343c <HAL_RCC_OscConfig+0x474>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2ea>
 80032a4:	4b64      	ldr	r3, [pc, #400]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a63      	ldr	r2, [pc, #396]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	e01c      	b.n	80032ec <HAL_RCC_OscConfig+0x324>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x30c>
 80032ba:	4b5f      	ldr	r3, [pc, #380]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a5e      	ldr	r2, [pc, #376]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
 80032c6:	4b5c      	ldr	r3, [pc, #368]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	4a5b      	ldr	r2, [pc, #364]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6713      	str	r3, [r2, #112]	; 0x70
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0x324>
 80032d4:	4b58      	ldr	r3, [pc, #352]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a57      	ldr	r2, [pc, #348]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	4b55      	ldr	r3, [pc, #340]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a54      	ldr	r2, [pc, #336]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032e6:	f023 0304 	bic.w	r3, r3, #4
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d015      	beq.n	8003320 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fd fd76 	bl	8000de4 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fd fd72 	bl	8000de4 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0cb      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	4b49      	ldr	r3, [pc, #292]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0ee      	beq.n	80032fc <HAL_RCC_OscConfig+0x334>
 800331e:	e014      	b.n	800334a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003320:	f7fd fd60 	bl	8000de4 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7fd fd5c 	bl	8000de4 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0b5      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333e:	4b3e      	ldr	r3, [pc, #248]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1ee      	bne.n	8003328 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003350:	4b39      	ldr	r3, [pc, #228]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	4a38      	ldr	r2, [pc, #224]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a1 	beq.w	80034a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003366:	4b34      	ldr	r3, [pc, #208]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b08      	cmp	r3, #8
 8003370:	d05c      	beq.n	800342c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d141      	bne.n	80033fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_RCC_OscConfig+0x478>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fd fd30 	bl	8000de4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003388:	f7fd fd2c 	bl	8000de4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e087      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	4b27      	ldr	r3, [pc, #156]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	019b      	lsls	r3, r3, #6
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	3b01      	subs	r3, #1
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	491b      	ldr	r1, [pc, #108]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <HAL_RCC_OscConfig+0x478>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d6:	f7fd fd05 	bl	8000de4 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033de:	f7fd fd01 	bl	8000de4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e05c      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x416>
 80033fc:	e054      	b.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_RCC_OscConfig+0x478>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd fcee 	bl	8000de4 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340c:	f7fd fcea 	bl	8000de4 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e045      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x444>
 800342a:	e03d      	b.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e038      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
 8003438:	40023800 	.word	0x40023800
 800343c:	40007000 	.word	0x40007000
 8003440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003444:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <HAL_RCC_OscConfig+0x4ec>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d028      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d121      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d11a      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800347a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800347c:	4293      	cmp	r3, r2
 800347e:	d111      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	3b01      	subs	r3, #1
 800348e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800

080034b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0cc      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b68      	ldr	r3, [pc, #416]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d90c      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b65      	ldr	r3, [pc, #404]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b63      	ldr	r3, [pc, #396]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0b8      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a58      	ldr	r2, [pc, #352]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003524:	4b53      	ldr	r3, [pc, #332]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800352e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003530:	4b50      	ldr	r3, [pc, #320]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	494d      	ldr	r1, [pc, #308]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d044      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d119      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e07f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d003      	beq.n	8003576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003572:	2b03      	cmp	r3, #3
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003576:	4b3f      	ldr	r3, [pc, #252]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e06f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003586:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e067      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003596:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f023 0203 	bic.w	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4934      	ldr	r1, [pc, #208]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a8:	f7fd fc1c 	bl	8000de4 <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b0:	f7fd fc18 	bl	8000de4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e04f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 020c 	and.w	r2, r3, #12
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d1eb      	bne.n	80035b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d20c      	bcs.n	8003600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b22      	ldr	r3, [pc, #136]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e032      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4916      	ldr	r1, [pc, #88]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	490e      	ldr	r1, [pc, #56]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800363e:	f000 f821 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8003642:	4602      	mov	r2, r0
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	490a      	ldr	r1, [pc, #40]	; (8003678 <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	5ccb      	ldrb	r3, [r1, r3]
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd fb7c 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023c00 	.word	0x40023c00
 8003674:	40023800 	.word	0x40023800
 8003678:	080080a0 	.word	0x080080a0
 800367c:	20000000 	.word	0x20000000
 8003680:	20000004 	.word	0x20000004

08003684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003688:	b094      	sub	sp, #80	; 0x50
 800368a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	647b      	str	r3, [r7, #68]	; 0x44
 8003690:	2300      	movs	r3, #0
 8003692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003694:	2300      	movs	r3, #0
 8003696:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800369c:	4b79      	ldr	r3, [pc, #484]	; (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d00d      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x40>
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	f200 80e1 	bhi.w	8003870 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x34>
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x3a>
 80036b6:	e0db      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b73      	ldr	r3, [pc, #460]	; (8003888 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036bc:	e0db      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036be:	4b73      	ldr	r3, [pc, #460]	; (800388c <HAL_RCC_GetSysClockFreq+0x208>)
 80036c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036c2:	e0d8      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c4:	4b6f      	ldr	r3, [pc, #444]	; (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ce:	4b6d      	ldr	r3, [pc, #436]	; (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d063      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036da:	4b6a      	ldr	r3, [pc, #424]	; (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	2200      	movs	r2, #0
 80036e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ec:	633b      	str	r3, [r7, #48]	; 0x30
 80036ee:	2300      	movs	r3, #0
 80036f0:	637b      	str	r3, [r7, #52]	; 0x34
 80036f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036f6:	4622      	mov	r2, r4
 80036f8:	462b      	mov	r3, r5
 80036fa:	f04f 0000 	mov.w	r0, #0
 80036fe:	f04f 0100 	mov.w	r1, #0
 8003702:	0159      	lsls	r1, r3, #5
 8003704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003708:	0150      	lsls	r0, r2, #5
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4621      	mov	r1, r4
 8003710:	1a51      	subs	r1, r2, r1
 8003712:	6139      	str	r1, [r7, #16]
 8003714:	4629      	mov	r1, r5
 8003716:	eb63 0301 	sbc.w	r3, r3, r1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003728:	4659      	mov	r1, fp
 800372a:	018b      	lsls	r3, r1, #6
 800372c:	4651      	mov	r1, sl
 800372e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003732:	4651      	mov	r1, sl
 8003734:	018a      	lsls	r2, r1, #6
 8003736:	4651      	mov	r1, sl
 8003738:	ebb2 0801 	subs.w	r8, r2, r1
 800373c:	4659      	mov	r1, fp
 800373e:	eb63 0901 	sbc.w	r9, r3, r1
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800374e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003756:	4690      	mov	r8, r2
 8003758:	4699      	mov	r9, r3
 800375a:	4623      	mov	r3, r4
 800375c:	eb18 0303 	adds.w	r3, r8, r3
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	462b      	mov	r3, r5
 8003764:	eb49 0303 	adc.w	r3, r9, r3
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003776:	4629      	mov	r1, r5
 8003778:	024b      	lsls	r3, r1, #9
 800377a:	4621      	mov	r1, r4
 800377c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003780:	4621      	mov	r1, r4
 8003782:	024a      	lsls	r2, r1, #9
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800378a:	2200      	movs	r2, #0
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
 800378e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003794:	f7fc fd18 	bl	80001c8 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4613      	mov	r3, r2
 800379e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a0:	e058      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a2:	4b38      	ldr	r3, [pc, #224]	; (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	2200      	movs	r2, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	4611      	mov	r1, r2
 80037ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037b2:	623b      	str	r3, [r7, #32]
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
 80037b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037bc:	4642      	mov	r2, r8
 80037be:	464b      	mov	r3, r9
 80037c0:	f04f 0000 	mov.w	r0, #0
 80037c4:	f04f 0100 	mov.w	r1, #0
 80037c8:	0159      	lsls	r1, r3, #5
 80037ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ce:	0150      	lsls	r0, r2, #5
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4641      	mov	r1, r8
 80037d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80037da:	4649      	mov	r1, r9
 80037dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037f4:	ebb2 040a 	subs.w	r4, r2, sl
 80037f8:	eb63 050b 	sbc.w	r5, r3, fp
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	00eb      	lsls	r3, r5, #3
 8003806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800380a:	00e2      	lsls	r2, r4, #3
 800380c:	4614      	mov	r4, r2
 800380e:	461d      	mov	r5, r3
 8003810:	4643      	mov	r3, r8
 8003812:	18e3      	adds	r3, r4, r3
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	464b      	mov	r3, r9
 8003818:	eb45 0303 	adc.w	r3, r5, r3
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800382a:	4629      	mov	r1, r5
 800382c:	028b      	lsls	r3, r1, #10
 800382e:	4621      	mov	r1, r4
 8003830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003834:	4621      	mov	r1, r4
 8003836:	028a      	lsls	r2, r1, #10
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383e:	2200      	movs	r2, #0
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	61fa      	str	r2, [r7, #28]
 8003844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003848:	f7fc fcbe 	bl	80001c8 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4613      	mov	r3, r2
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	3301      	adds	r3, #1
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800386e:	e002      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCC_GetSysClockFreq+0x204>)
 8003872:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003878:	4618      	mov	r0, r3
 800387a:	3750      	adds	r7, #80	; 0x50
 800387c:	46bd      	mov	sp, r7
 800387e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800
 8003888:	00f42400 	.word	0x00f42400
 800388c:	007a1200 	.word	0x007a1200

08003890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003894:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000000 	.word	0x20000000

080038a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038ac:	f7ff fff0 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	0a9b      	lsrs	r3, r3, #10
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4903      	ldr	r1, [pc, #12]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40023800 	.word	0x40023800
 80038cc:	080080b0 	.word	0x080080b0

080038d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038d4:	f7ff ffdc 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	0b5b      	lsrs	r3, r3, #13
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4903      	ldr	r1, [pc, #12]	; (80038f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40023800 	.word	0x40023800
 80038f4:	080080b0 	.word	0x080080b0

080038f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e07b      	b.n	8003a02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800391a:	d009      	beq.n	8003930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	61da      	str	r2, [r3, #28]
 8003922:	e005      	b.n	8003930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd f87c 	bl	8000a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003966:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b4:	ea42 0103 	orr.w	r1, r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	f003 0104 	and.w	r1, r3, #4
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f003 0210 	and.w	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e03f      	b.n	8003a9c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7fd f851 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2224      	movs	r2, #36	; 0x24
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fc7a 	bl	8004348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b0ba      	sub	sp, #232	; 0xe8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10f      	bne.n	8003b0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <HAL_UART_IRQHandler+0x66>
 8003af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fb65 	bl	80041d2 <UART_Receive_IT>
      return;
 8003b08:	e256      	b.n	8003fb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80de 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x22c>
 8003b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80d1 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_UART_IRQHandler+0xae>
 8003b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_UART_IRQHandler+0xd2>
 8003b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f043 0202 	orr.w	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <HAL_UART_IRQHandler+0xf6>
 8003b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f043 0204 	orr.w	r2, r3, #4
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d011      	beq.n	8003bca <HAL_UART_IRQHandler+0x126>
 8003ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f043 0208 	orr.w	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 81ed 	beq.w	8003fae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x14e>
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 faf0 	bl	80041d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <HAL_UART_IRQHandler+0x17a>
 8003c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d04f      	beq.n	8003cbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9f8 	bl	8004014 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2e:	2b40      	cmp	r3, #64	; 0x40
 8003c30:	d141      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3314      	adds	r3, #20
 8003c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3314      	adds	r3, #20
 8003c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1d9      	bne.n	8003c32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d013      	beq.n	8003cae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	4a7d      	ldr	r2, [pc, #500]	; (8003e80 <HAL_UART_IRQHandler+0x3dc>)
 8003c8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fd fa57 	bl	8001146 <HAL_DMA_Abort_IT>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d016      	beq.n	8003ccc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	e00e      	b.n	8003ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f99a 	bl	8003fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	e00a      	b.n	8003ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f996 	bl	8003fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	e006      	b.n	8003ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f992 	bl	8003fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003cca:	e170      	b.n	8003fae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	bf00      	nop
    return;
 8003cce:	e16e      	b.n	8003fae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	f040 814a 	bne.w	8003f6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8143 	beq.w	8003f6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 813c 	beq.w	8003f6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	f040 80b4 	bne.w	8003e84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8140 	beq.w	8003fb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	f080 8139 	bcs.w	8003fb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d52:	f000 8088 	beq.w	8003e66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1d9      	bne.n	8003d56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3314      	adds	r3, #20
 8003da8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3314      	adds	r3, #20
 8003dc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e1      	bne.n	8003da2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3314      	adds	r3, #20
 8003de4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3314      	adds	r3, #20
 8003dfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e3      	bne.n	8003dde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e36:	f023 0310 	bic.w	r3, r3, #16
 8003e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e48:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e3      	bne.n	8003e24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fd f900 	bl	8001066 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f8c0 	bl	8003ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e7c:	e099      	b.n	8003fb2 <HAL_UART_IRQHandler+0x50e>
 8003e7e:	bf00      	nop
 8003e80:	080040db 	.word	0x080040db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 808b 	beq.w	8003fb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8086 	beq.w	8003fb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	330c      	adds	r3, #12
 8003eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ece:	647a      	str	r2, [r7, #68]	; 0x44
 8003ed0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e3      	bne.n	8003eaa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3314      	adds	r3, #20
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3314      	adds	r3, #20
 8003f02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f06:	633a      	str	r2, [r7, #48]	; 0x30
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e3      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0310 	bic.w	r3, r3, #16
 8003f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	330c      	adds	r3, #12
 8003f48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f4c:	61fa      	str	r2, [r7, #28]
 8003f4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	69b9      	ldr	r1, [r7, #24]
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	617b      	str	r3, [r7, #20]
   return(result);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e3      	bne.n	8003f28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f848 	bl	8003ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f6c:	e023      	b.n	8003fb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_UART_IRQHandler+0x4ea>
 8003f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8bb 	bl	8004102 <UART_Transmit_IT>
    return;
 8003f8c:	e014      	b.n	8003fb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00e      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x514>
 8003f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8fb 	bl	80041a2 <UART_EndTransmit_IT>
    return;
 8003fac:	e004      	b.n	8003fb8 <HAL_UART_IRQHandler+0x514>
    return;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <HAL_UART_IRQHandler+0x514>
      return;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <HAL_UART_IRQHandler+0x514>
      return;
 8003fb6:	bf00      	nop
  }
}
 8003fb8:	37e8      	adds	r7, #232	; 0xe8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop

08003fc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b095      	sub	sp, #84	; 0x54
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	330c      	adds	r3, #12
 8004022:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800403c:	643a      	str	r2, [r7, #64]	; 0x40
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e5      	bne.n	800401c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3314      	adds	r3, #20
 8004056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	64bb      	str	r3, [r7, #72]	; 0x48
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3314      	adds	r3, #20
 800406e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004070:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	2b01      	cmp	r3, #1
 800408a:	d119      	bne.n	80040c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	330c      	adds	r3, #12
 8004092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	60bb      	str	r3, [r7, #8]
   return(result);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f023 0310 	bic.w	r3, r3, #16
 80040a2:	647b      	str	r3, [r7, #68]	; 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	330c      	adds	r3, #12
 80040aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ac:	61ba      	str	r2, [r7, #24]
 80040ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6979      	ldr	r1, [r7, #20]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	e841 2300 	strex	r3, r2, [r1]
 80040b8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e5      	bne.n	800408c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040ce:	bf00      	nop
 80040d0:	3754      	adds	r7, #84	; 0x54
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f7ff ff77 	bl	8003fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040fa:	bf00      	nop
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b21      	cmp	r3, #33	; 0x21
 8004114:	d13e      	bne.n	8004194 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411e:	d114      	bne.n	800414a <UART_Transmit_IT+0x48>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d110      	bne.n	800414a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800413c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	1c9a      	adds	r2, r3, #2
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	621a      	str	r2, [r3, #32]
 8004148:	e008      	b.n	800415c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	1c59      	adds	r1, r3, #1
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6211      	str	r1, [r2, #32]
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29b      	uxth	r3, r3
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	4619      	mov	r1, r3
 800416a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10f      	bne.n	8004190 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800417e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800418e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004194:	2302      	movs	r3, #2
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fefc 	bl	8003fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b08c      	sub	sp, #48	; 0x30
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b22      	cmp	r3, #34	; 0x22
 80041e4:	f040 80ab 	bne.w	800433e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f0:	d117      	bne.n	8004222 <UART_Receive_IT+0x50>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d113      	bne.n	8004222 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004210:	b29a      	uxth	r2, r3
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	1c9a      	adds	r2, r3, #2
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	629a      	str	r2, [r3, #40]	; 0x28
 8004220:	e026      	b.n	8004270 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004228:	2300      	movs	r3, #0
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004234:	d007      	beq.n	8004246 <UART_Receive_IT+0x74>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <UART_Receive_IT+0x82>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	b2da      	uxtb	r2, r3
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	e008      	b.n	8004266 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004260:	b2da      	uxtb	r2, r3
 8004262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004264:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29b      	uxth	r3, r3
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4619      	mov	r1, r3
 800427e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004280:	2b00      	cmp	r3, #0
 8004282:	d15a      	bne.n	800433a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0220 	bic.w	r2, r2, #32
 8004292:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d135      	bne.n	8004330 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	330c      	adds	r3, #12
 80042d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	613b      	str	r3, [r7, #16]
   return(result);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f023 0310 	bic.w	r3, r3, #16
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ea:	623a      	str	r2, [r7, #32]
 80042ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	69f9      	ldr	r1, [r7, #28]
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e5      	bne.n	80042ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2b10      	cmp	r3, #16
 800430a:	d10a      	bne.n	8004322 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff fe67 	bl	8003ffc <HAL_UARTEx_RxEventCallback>
 800432e:	e002      	b.n	8004336 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff fe4f 	bl	8003fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	e002      	b.n	8004340 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e000      	b.n	8004340 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800433e:	2302      	movs	r3, #2
  }
}
 8004340:	4618      	mov	r0, r3
 8004342:	3730      	adds	r7, #48	; 0x30
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800434c:	b0c0      	sub	sp, #256	; 0x100
 800434e:	af00      	add	r7, sp, #0
 8004350:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	68d9      	ldr	r1, [r3, #12]
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	ea40 0301 	orr.w	r3, r0, r1
 8004370:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	431a      	orrs	r2, r3
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	431a      	orrs	r2, r3
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043a0:	f021 010c 	bic.w	r1, r1, #12
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043ae:	430b      	orrs	r3, r1
 80043b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c2:	6999      	ldr	r1, [r3, #24]
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	ea40 0301 	orr.w	r3, r0, r1
 80043ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b8f      	ldr	r3, [pc, #572]	; (8004614 <UART_SetConfig+0x2cc>)
 80043d8:	429a      	cmp	r2, r3
 80043da:	d005      	beq.n	80043e8 <UART_SetConfig+0xa0>
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4b8d      	ldr	r3, [pc, #564]	; (8004618 <UART_SetConfig+0x2d0>)
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d104      	bne.n	80043f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043e8:	f7ff fa72 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 80043ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043f0:	e003      	b.n	80043fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043f2:	f7ff fa59 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 80043f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004404:	f040 810c 	bne.w	8004620 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440c:	2200      	movs	r2, #0
 800440e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004412:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004416:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800441a:	4622      	mov	r2, r4
 800441c:	462b      	mov	r3, r5
 800441e:	1891      	adds	r1, r2, r2
 8004420:	65b9      	str	r1, [r7, #88]	; 0x58
 8004422:	415b      	adcs	r3, r3
 8004424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800442a:	4621      	mov	r1, r4
 800442c:	eb12 0801 	adds.w	r8, r2, r1
 8004430:	4629      	mov	r1, r5
 8004432:	eb43 0901 	adc.w	r9, r3, r1
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800444a:	4690      	mov	r8, r2
 800444c:	4699      	mov	r9, r3
 800444e:	4623      	mov	r3, r4
 8004450:	eb18 0303 	adds.w	r3, r8, r3
 8004454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004458:	462b      	mov	r3, r5
 800445a:	eb49 0303 	adc.w	r3, r9, r3
 800445e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800446e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004472:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004476:	460b      	mov	r3, r1
 8004478:	18db      	adds	r3, r3, r3
 800447a:	653b      	str	r3, [r7, #80]	; 0x50
 800447c:	4613      	mov	r3, r2
 800447e:	eb42 0303 	adc.w	r3, r2, r3
 8004482:	657b      	str	r3, [r7, #84]	; 0x54
 8004484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004488:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800448c:	f7fb fe9c 	bl	80001c8 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4b61      	ldr	r3, [pc, #388]	; (800461c <UART_SetConfig+0x2d4>)
 8004496:	fba3 2302 	umull	r2, r3, r3, r2
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	011c      	lsls	r4, r3, #4
 800449e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044b0:	4642      	mov	r2, r8
 80044b2:	464b      	mov	r3, r9
 80044b4:	1891      	adds	r1, r2, r2
 80044b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80044b8:	415b      	adcs	r3, r3
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044c0:	4641      	mov	r1, r8
 80044c2:	eb12 0a01 	adds.w	sl, r2, r1
 80044c6:	4649      	mov	r1, r9
 80044c8:	eb43 0b01 	adc.w	fp, r3, r1
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044e0:	4692      	mov	sl, r2
 80044e2:	469b      	mov	fp, r3
 80044e4:	4643      	mov	r3, r8
 80044e6:	eb1a 0303 	adds.w	r3, sl, r3
 80044ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044ee:	464b      	mov	r3, r9
 80044f0:	eb4b 0303 	adc.w	r3, fp, r3
 80044f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004504:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004508:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800450c:	460b      	mov	r3, r1
 800450e:	18db      	adds	r3, r3, r3
 8004510:	643b      	str	r3, [r7, #64]	; 0x40
 8004512:	4613      	mov	r3, r2
 8004514:	eb42 0303 	adc.w	r3, r2, r3
 8004518:	647b      	str	r3, [r7, #68]	; 0x44
 800451a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800451e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004522:	f7fb fe51 	bl	80001c8 <__aeabi_uldivmod>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4611      	mov	r1, r2
 800452c:	4b3b      	ldr	r3, [pc, #236]	; (800461c <UART_SetConfig+0x2d4>)
 800452e:	fba3 2301 	umull	r2, r3, r3, r1
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	2264      	movs	r2, #100	; 0x64
 8004536:	fb02 f303 	mul.w	r3, r2, r3
 800453a:	1acb      	subs	r3, r1, r3
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004542:	4b36      	ldr	r3, [pc, #216]	; (800461c <UART_SetConfig+0x2d4>)
 8004544:	fba3 2302 	umull	r2, r3, r3, r2
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004550:	441c      	add	r4, r3
 8004552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004556:	2200      	movs	r2, #0
 8004558:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800455c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004560:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004564:	4642      	mov	r2, r8
 8004566:	464b      	mov	r3, r9
 8004568:	1891      	adds	r1, r2, r2
 800456a:	63b9      	str	r1, [r7, #56]	; 0x38
 800456c:	415b      	adcs	r3, r3
 800456e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004570:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004574:	4641      	mov	r1, r8
 8004576:	1851      	adds	r1, r2, r1
 8004578:	6339      	str	r1, [r7, #48]	; 0x30
 800457a:	4649      	mov	r1, r9
 800457c:	414b      	adcs	r3, r1
 800457e:	637b      	str	r3, [r7, #52]	; 0x34
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800458c:	4659      	mov	r1, fp
 800458e:	00cb      	lsls	r3, r1, #3
 8004590:	4651      	mov	r1, sl
 8004592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004596:	4651      	mov	r1, sl
 8004598:	00ca      	lsls	r2, r1, #3
 800459a:	4610      	mov	r0, r2
 800459c:	4619      	mov	r1, r3
 800459e:	4603      	mov	r3, r0
 80045a0:	4642      	mov	r2, r8
 80045a2:	189b      	adds	r3, r3, r2
 80045a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045a8:	464b      	mov	r3, r9
 80045aa:	460a      	mov	r2, r1
 80045ac:	eb42 0303 	adc.w	r3, r2, r3
 80045b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045c8:	460b      	mov	r3, r1
 80045ca:	18db      	adds	r3, r3, r3
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ce:	4613      	mov	r3, r2
 80045d0:	eb42 0303 	adc.w	r3, r2, r3
 80045d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045de:	f7fb fdf3 	bl	80001c8 <__aeabi_uldivmod>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4b0d      	ldr	r3, [pc, #52]	; (800461c <UART_SetConfig+0x2d4>)
 80045e8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	2164      	movs	r1, #100	; 0x64
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	3332      	adds	r3, #50	; 0x32
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <UART_SetConfig+0x2d4>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	f003 0207 	and.w	r2, r3, #7
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4422      	add	r2, r4
 800460e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004610:	e106      	b.n	8004820 <UART_SetConfig+0x4d8>
 8004612:	bf00      	nop
 8004614:	40011000 	.word	0x40011000
 8004618:	40011400 	.word	0x40011400
 800461c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800462a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800462e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004632:	4642      	mov	r2, r8
 8004634:	464b      	mov	r3, r9
 8004636:	1891      	adds	r1, r2, r2
 8004638:	6239      	str	r1, [r7, #32]
 800463a:	415b      	adcs	r3, r3
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
 800463e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004642:	4641      	mov	r1, r8
 8004644:	1854      	adds	r4, r2, r1
 8004646:	4649      	mov	r1, r9
 8004648:	eb43 0501 	adc.w	r5, r3, r1
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	00eb      	lsls	r3, r5, #3
 8004656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800465a:	00e2      	lsls	r2, r4, #3
 800465c:	4614      	mov	r4, r2
 800465e:	461d      	mov	r5, r3
 8004660:	4643      	mov	r3, r8
 8004662:	18e3      	adds	r3, r4, r3
 8004664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004668:	464b      	mov	r3, r9
 800466a:	eb45 0303 	adc.w	r3, r5, r3
 800466e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800467e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800468e:	4629      	mov	r1, r5
 8004690:	008b      	lsls	r3, r1, #2
 8004692:	4621      	mov	r1, r4
 8004694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004698:	4621      	mov	r1, r4
 800469a:	008a      	lsls	r2, r1, #2
 800469c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046a0:	f7fb fd92 	bl	80001c8 <__aeabi_uldivmod>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4b60      	ldr	r3, [pc, #384]	; (800482c <UART_SetConfig+0x4e4>)
 80046aa:	fba3 2302 	umull	r2, r3, r3, r2
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	011c      	lsls	r4, r3, #4
 80046b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046c4:	4642      	mov	r2, r8
 80046c6:	464b      	mov	r3, r9
 80046c8:	1891      	adds	r1, r2, r2
 80046ca:	61b9      	str	r1, [r7, #24]
 80046cc:	415b      	adcs	r3, r3
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d4:	4641      	mov	r1, r8
 80046d6:	1851      	adds	r1, r2, r1
 80046d8:	6139      	str	r1, [r7, #16]
 80046da:	4649      	mov	r1, r9
 80046dc:	414b      	adcs	r3, r1
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046ec:	4659      	mov	r1, fp
 80046ee:	00cb      	lsls	r3, r1, #3
 80046f0:	4651      	mov	r1, sl
 80046f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f6:	4651      	mov	r1, sl
 80046f8:	00ca      	lsls	r2, r1, #3
 80046fa:	4610      	mov	r0, r2
 80046fc:	4619      	mov	r1, r3
 80046fe:	4603      	mov	r3, r0
 8004700:	4642      	mov	r2, r8
 8004702:	189b      	adds	r3, r3, r2
 8004704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004708:	464b      	mov	r3, r9
 800470a:	460a      	mov	r2, r1
 800470c:	eb42 0303 	adc.w	r3, r2, r3
 8004710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	67bb      	str	r3, [r7, #120]	; 0x78
 800471e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800472c:	4649      	mov	r1, r9
 800472e:	008b      	lsls	r3, r1, #2
 8004730:	4641      	mov	r1, r8
 8004732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004736:	4641      	mov	r1, r8
 8004738:	008a      	lsls	r2, r1, #2
 800473a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800473e:	f7fb fd43 	bl	80001c8 <__aeabi_uldivmod>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4611      	mov	r1, r2
 8004748:	4b38      	ldr	r3, [pc, #224]	; (800482c <UART_SetConfig+0x4e4>)
 800474a:	fba3 2301 	umull	r2, r3, r3, r1
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	2264      	movs	r2, #100	; 0x64
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	1acb      	subs	r3, r1, r3
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	3332      	adds	r3, #50	; 0x32
 800475c:	4a33      	ldr	r2, [pc, #204]	; (800482c <UART_SetConfig+0x4e4>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004768:	441c      	add	r4, r3
 800476a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800476e:	2200      	movs	r2, #0
 8004770:	673b      	str	r3, [r7, #112]	; 0x70
 8004772:	677a      	str	r2, [r7, #116]	; 0x74
 8004774:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004778:	4642      	mov	r2, r8
 800477a:	464b      	mov	r3, r9
 800477c:	1891      	adds	r1, r2, r2
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	415b      	adcs	r3, r3
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004788:	4641      	mov	r1, r8
 800478a:	1851      	adds	r1, r2, r1
 800478c:	6039      	str	r1, [r7, #0]
 800478e:	4649      	mov	r1, r9
 8004790:	414b      	adcs	r3, r1
 8004792:	607b      	str	r3, [r7, #4]
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047a0:	4659      	mov	r1, fp
 80047a2:	00cb      	lsls	r3, r1, #3
 80047a4:	4651      	mov	r1, sl
 80047a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047aa:	4651      	mov	r1, sl
 80047ac:	00ca      	lsls	r2, r1, #3
 80047ae:	4610      	mov	r0, r2
 80047b0:	4619      	mov	r1, r3
 80047b2:	4603      	mov	r3, r0
 80047b4:	4642      	mov	r2, r8
 80047b6:	189b      	adds	r3, r3, r2
 80047b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ba:	464b      	mov	r3, r9
 80047bc:	460a      	mov	r2, r1
 80047be:	eb42 0303 	adc.w	r3, r2, r3
 80047c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	663b      	str	r3, [r7, #96]	; 0x60
 80047ce:	667a      	str	r2, [r7, #100]	; 0x64
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047dc:	4649      	mov	r1, r9
 80047de:	008b      	lsls	r3, r1, #2
 80047e0:	4641      	mov	r1, r8
 80047e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e6:	4641      	mov	r1, r8
 80047e8:	008a      	lsls	r2, r1, #2
 80047ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047ee:	f7fb fceb 	bl	80001c8 <__aeabi_uldivmod>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4b0d      	ldr	r3, [pc, #52]	; (800482c <UART_SetConfig+0x4e4>)
 80047f8:	fba3 1302 	umull	r1, r3, r3, r2
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	2164      	movs	r1, #100	; 0x64
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	3332      	adds	r3, #50	; 0x32
 800480a:	4a08      	ldr	r2, [pc, #32]	; (800482c <UART_SetConfig+0x4e4>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	f003 020f 	and.w	r2, r3, #15
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4422      	add	r2, r4
 800481e:	609a      	str	r2, [r3, #8]
}
 8004820:	bf00      	nop
 8004822:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004826:	46bd      	mov	sp, r7
 8004828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800482c:	51eb851f 	.word	0x51eb851f

08004830 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004830:	b084      	sub	sp, #16
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	f107 001c 	add.w	r0, r7, #28
 800483e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	2b01      	cmp	r3, #1
 8004846:	d122      	bne.n	800488e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800485c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004872:	2b01      	cmp	r3, #1
 8004874:	d105      	bne.n	8004882 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f9c0 	bl	8004c08 <USB_CoreReset>
 8004888:	4603      	mov	r3, r0
 800488a:	73fb      	strb	r3, [r7, #15]
 800488c:	e01a      	b.n	80048c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f9b4 	bl	8004c08 <USB_CoreReset>
 80048a0:	4603      	mov	r3, r0
 80048a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80048a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	639a      	str	r2, [r3, #56]	; 0x38
 80048b6:	e005      	b.n	80048c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d10b      	bne.n	80048e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f043 0206 	orr.w	r2, r3, #6
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f043 0220 	orr.w	r2, r3, #32
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048ee:	b004      	add	sp, #16
 80048f0:	4770      	bx	lr

080048f2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f043 0201 	orr.w	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f023 0201 	bic.w	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	460b      	mov	r3, r1
 8004940:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d115      	bne.n	8004984 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004964:	2001      	movs	r0, #1
 8004966:	f7fc fa49 	bl	8000dfc <HAL_Delay>
      ms++;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3301      	adds	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f93a 	bl	8004bea <USB_GetMode>
 8004976:	4603      	mov	r3, r0
 8004978:	2b01      	cmp	r3, #1
 800497a:	d01e      	beq.n	80049ba <USB_SetCurrentMode+0x84>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b31      	cmp	r3, #49	; 0x31
 8004980:	d9f0      	bls.n	8004964 <USB_SetCurrentMode+0x2e>
 8004982:	e01a      	b.n	80049ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d115      	bne.n	80049b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004996:	2001      	movs	r0, #1
 8004998:	f7fc fa30 	bl	8000dfc <HAL_Delay>
      ms++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3301      	adds	r3, #1
 80049a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f921 	bl	8004bea <USB_GetMode>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <USB_SetCurrentMode+0x84>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b31      	cmp	r3, #49	; 0x31
 80049b2:	d9f0      	bls.n	8004996 <USB_SetCurrentMode+0x60>
 80049b4:	e001      	b.n	80049ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e005      	b.n	80049c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b32      	cmp	r3, #50	; 0x32
 80049be:	d101      	bne.n	80049c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <USB_FlushTxFifo+0x64>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d901      	bls.n	80049f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e01b      	b.n	8004a28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	daf2      	bge.n	80049de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	019b      	lsls	r3, r3, #6
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <USB_FlushTxFifo+0x64>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e006      	b.n	8004a28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	d0f0      	beq.n	8004a08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	00030d40 	.word	0x00030d40

08004a38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3301      	adds	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <USB_FlushRxFifo+0x5c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e018      	b.n	8004a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	daf2      	bge.n	8004a44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2210      	movs	r2, #16
 8004a66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a08      	ldr	r2, [pc, #32]	; (8004a94 <USB_FlushRxFifo+0x5c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e006      	b.n	8004a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d0f0      	beq.n	8004a68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	00030d40 	.word	0x00030d40

08004a98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b089      	sub	sp, #36	; 0x24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	71fb      	strb	r3, [r7, #7]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004ab6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d123      	bne.n	8004b06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004abe:	88bb      	ldrh	r3, [r7, #4]
 8004ac0:	3303      	adds	r3, #3
 8004ac2:	089b      	lsrs	r3, r3, #2
 8004ac4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	e018      	b.n	8004afe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	031a      	lsls	r2, r3, #12
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad8:	461a      	mov	r2, r3
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	3301      	adds	r3, #1
 8004af0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	3301      	adds	r3, #1
 8004af6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	3301      	adds	r3, #1
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d3e2      	bcc.n	8004acc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3724      	adds	r7, #36	; 0x24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b08b      	sub	sp, #44	; 0x2c
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	089b      	lsrs	r3, r3, #2
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	623b      	str	r3, [r7, #32]
 8004b3e:	e014      	b.n	8004b6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	3301      	adds	r3, #1
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	3301      	adds	r3, #1
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	3301      	adds	r3, #1
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	3301      	adds	r3, #1
 8004b68:	623b      	str	r3, [r7, #32]
 8004b6a:	6a3a      	ldr	r2, [r7, #32]
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d3e6      	bcc.n	8004b40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b72:	8bfb      	ldrh	r3, [r7, #30]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01e      	beq.n	8004bb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b82:	461a      	mov	r2, r3
 8004b84:	f107 0310 	add.w	r3, r7, #16
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	701a      	strb	r2, [r3, #0]
      i++;
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004baa:	8bfb      	ldrh	r3, [r7, #30]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004bb0:	8bfb      	ldrh	r3, [r7, #30]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1ea      	bne.n	8004b8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	372c      	adds	r7, #44	; 0x2c
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <USB_CoreReset+0x64>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e01b      	b.n	8004c5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	daf2      	bge.n	8004c14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f043 0201 	orr.w	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3301      	adds	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <USB_CoreReset+0x64>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d901      	bls.n	8004c50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e006      	b.n	8004c5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d0f0      	beq.n	8004c3e <USB_CoreReset+0x36>

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	00030d40 	.word	0x00030d40

08004c70 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c70:	b084      	sub	sp, #16
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c90:	461a      	mov	r2, r3
 8004c92:	2300      	movs	r3, #0
 8004c94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d018      	beq.n	8004cf8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d10a      	bne.n	8004ce2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cda:	f043 0304 	orr.w	r3, r3, #4
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	e014      	b.n	8004d0c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cf0:	f023 0304 	bic.w	r3, r3, #4
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e009      	b.n	8004d0c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d06:	f023 0304 	bic.w	r3, r3, #4
 8004d0a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d0c:	2110      	movs	r1, #16
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff fe5e 	bl	80049d0 <USB_FlushTxFifo>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff fe8a 	bl	8004a38 <USB_FlushRxFifo>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	e015      	b.n	8004d60 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d40:	461a      	mov	r2, r3
 8004d42:	f04f 33ff 	mov.w	r3, #4294967295
 8004d46:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d54:	461a      	mov	r2, r3
 8004d56:	2300      	movs	r3, #0
 8004d58:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d3e5      	bcc.n	8004d34 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f04f 32ff 	mov.w	r2, #4294967295
 8004d74:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <USB_HostInit+0x16c>)
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a13      	ldr	r2, [pc, #76]	; (8004de0 <USB_HostInit+0x170>)
 8004d94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004d98:	e009      	b.n	8004dae <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a10      	ldr	r2, [pc, #64]	; (8004de4 <USB_HostInit+0x174>)
 8004da4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a0f      	ldr	r2, [pc, #60]	; (8004de8 <USB_HostInit+0x178>)
 8004daa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	f043 0210 	orr.w	r2, r3, #16
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699a      	ldr	r2, [r3, #24]
 8004dc4:	4b09      	ldr	r3, [pc, #36]	; (8004dec <USB_HostInit+0x17c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dd8:	b004      	add	sp, #16
 8004dda:	4770      	bx	lr
 8004ddc:	01000200 	.word	0x01000200
 8004de0:	00e00300 	.word	0x00e00300
 8004de4:	00600080 	.word	0x00600080
 8004de8:	004000e0 	.word	0x004000e0
 8004dec:	a3200008 	.word	0xa3200008

08004df0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d107      	bne.n	8004e42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004e3e:	6053      	str	r3, [r2, #4]
 8004e40:	e009      	b.n	8004e56 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d106      	bne.n	8004e56 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f241 7370 	movw	r3, #6000	; 0x1770
 8004e54:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e92:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004e94:	2064      	movs	r0, #100	; 0x64
 8004e96:	f7fb ffb1 	bl	8000dfc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004ea8:	200a      	movs	r0, #10
 8004eaa:	f7fb ffa7 	bl	8000dfc <HAL_Delay>

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004edc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d109      	bne.n	8004efc <USB_DriveVbus+0x44>
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d106      	bne.n	8004efc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004efa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f06:	d109      	bne.n	8004f1c <USB_DriveVbus+0x64>
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f1a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b085      	sub	sp, #20
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	0c5b      	lsrs	r3, r3, #17
 8004f48:	f003 0303 	and.w	r3, r3, #3
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	b29b      	uxth	r3, r3
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	70fb      	strb	r3, [r7, #3]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	70bb      	strb	r3, [r7, #2]
 8004f92:	4613      	mov	r3, r2
 8004f94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004faa:	461a      	mov	r2, r3
 8004fac:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004fb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d87e      	bhi.n	80050b8 <USB_HC_Init+0x13c>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <USB_HC_Init+0x44>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fd1 	.word	0x08004fd1
 8004fc4:	0800507b 	.word	0x0800507b
 8004fc8:	08004fd1 	.word	0x08004fd1
 8004fcc:	0800503d 	.word	0x0800503d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f240 439d 	movw	r3, #1181	; 0x49d
 8004fe2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004fe4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	da10      	bge.n	800500e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	0151      	lsls	r1, r2, #5
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	440a      	add	r2, r1
 8005002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800500c:	e057      	b.n	80050be <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005016:	2b00      	cmp	r3, #0
 8005018:	d051      	beq.n	80050be <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	440a      	add	r2, r1
 8005030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005034:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005038:	60d3      	str	r3, [r2, #12]
      break;
 800503a:	e040      	b.n	80050be <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4413      	add	r3, r2
 8005044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005048:	461a      	mov	r2, r3
 800504a:	f240 639d 	movw	r3, #1693	; 0x69d
 800504e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005050:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005054:	2b00      	cmp	r3, #0
 8005056:	da34      	bge.n	80050c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	78fa      	ldrb	r2, [r7, #3]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	440a      	add	r2, r1
 800506e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005076:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005078:	e023      	b.n	80050c2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	4413      	add	r3, r2
 8005082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005086:	461a      	mov	r2, r3
 8005088:	f240 2325 	movw	r3, #549	; 0x225
 800508c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800508e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005092:	2b00      	cmp	r3, #0
 8005094:	da17      	bge.n	80050c6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4413      	add	r3, r2
 800509e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	78fa      	ldrb	r2, [r7, #3]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80050b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80050b6:	e006      	b.n	80050c6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	77fb      	strb	r3, [r7, #31]
      break;
 80050bc:	e004      	b.n	80050c8 <USB_HC_Init+0x14c>
      break;
 80050be:	bf00      	nop
 80050c0:	e002      	b.n	80050c8 <USB_HC_Init+0x14c>
      break;
 80050c2:	bf00      	nop
 80050c4:	e000      	b.n	80050c8 <USB_HC_Init+0x14c>
      break;
 80050c6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050e2:	f043 0302 	orr.w	r3, r3, #2
 80050e6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ee:	699a      	ldr	r2, [r3, #24]
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	2101      	movs	r1, #1
 80050f8:	fa01 f303 	lsl.w	r3, r1, r3
 80050fc:	6939      	ldr	r1, [r7, #16]
 80050fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005102:	4313      	orrs	r3, r2
 8005104:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005112:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005116:	2b00      	cmp	r3, #0
 8005118:	da03      	bge.n	8005122 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800511a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e001      	b.n	8005126 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff feff 	bl	8004f2a <USB_GetHostSpeed>
 800512c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800512e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005132:	2b02      	cmp	r3, #2
 8005134:	d106      	bne.n	8005144 <USB_HC_Init+0x1c8>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d003      	beq.n	8005144 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800513c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	e001      	b.n	8005148 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005148:	787b      	ldrb	r3, [r7, #1]
 800514a:	059b      	lsls	r3, r3, #22
 800514c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005150:	78bb      	ldrb	r3, [r7, #2]
 8005152:	02db      	lsls	r3, r3, #11
 8005154:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005158:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800515a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800515e:	049b      	lsls	r3, r3, #18
 8005160:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005164:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005166:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005168:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800516c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	0159      	lsls	r1, r3, #5
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	440b      	add	r3, r1
 800517a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005184:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005186:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800518a:	2b03      	cmp	r3, #3
 800518c:	d003      	beq.n	8005196 <USB_HC_Init+0x21a>
 800518e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d10f      	bne.n	80051b6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4413      	add	r3, r2
 800519e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	78fa      	ldrb	r2, [r7, #3]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80051b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08c      	sub	sp, #48	; 0x30
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	4613      	mov	r3, r2
 80051cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	785b      	ldrb	r3, [r3, #1]
 80051d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80051d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051dc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d02d      	beq.n	8005246 <USB_HC_StartXfer+0x86>
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	791b      	ldrb	r3, [r3, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d129      	bne.n	8005246 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d117      	bne.n	8005228 <USB_HC_StartXfer+0x68>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	79db      	ldrb	r3, [r3, #7]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <USB_HC_StartXfer+0x48>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	79db      	ldrb	r3, [r3, #7]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d10f      	bne.n	8005228 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	4413      	add	r3, r2
 8005210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	6a3a      	ldr	r2, [r7, #32]
 800521c:	440a      	add	r2, r1
 800521e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10b      	bne.n	8005246 <USB_HC_StartXfer+0x86>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	795b      	ldrb	r3, [r3, #5]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d107      	bne.n	8005246 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	4619      	mov	r1, r3
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fa0f 	bl	8005660 <USB_DoPing>
      return HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	e0f8      	b.n	8005438 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	8912      	ldrh	r2, [r2, #8]
 8005256:	4413      	add	r3, r2
 8005258:	3b01      	subs	r3, #1
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	8912      	ldrh	r2, [r2, #8]
 800525e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005262:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005264:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005266:	8b7b      	ldrh	r3, [r7, #26]
 8005268:	429a      	cmp	r2, r3
 800526a:	d90b      	bls.n	8005284 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800526c:	8b7b      	ldrh	r3, [r7, #26]
 800526e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005270:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	8912      	ldrh	r2, [r2, #8]
 8005276:	fb03 f202 	mul.w	r2, r3, r2
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	611a      	str	r2, [r3, #16]
 800527e:	e001      	b.n	8005284 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005280:	2301      	movs	r3, #1
 8005282:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	78db      	ldrb	r3, [r3, #3]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d007      	beq.n	800529c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800528c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	8912      	ldrh	r2, [r2, #8]
 8005292:	fb03 f202 	mul.w	r2, r3, r2
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	611a      	str	r2, [r3, #16]
 800529a:	e003      	b.n	80052a4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052ae:	04d9      	lsls	r1, r3, #19
 80052b0:	4b63      	ldr	r3, [pc, #396]	; (8005440 <USB_HC_StartXfer+0x280>)
 80052b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	7a9b      	ldrb	r3, [r3, #10]
 80052ba:	075b      	lsls	r3, r3, #29
 80052bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052c0:	69f9      	ldr	r1, [r7, #28]
 80052c2:	0148      	lsls	r0, r1, #5
 80052c4:	6a39      	ldr	r1, [r7, #32]
 80052c6:	4401      	add	r1, r0
 80052c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80052d0:	79fb      	ldrb	r3, [r7, #7]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	68d9      	ldr	r1, [r3, #12]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e6:	460a      	mov	r2, r1
 80052e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bf0c      	ite	eq
 80052fa:	2301      	moveq	r3, #1
 80052fc:	2300      	movne	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	6a3a      	ldr	r2, [r7, #32]
 8005316:	440a      	add	r2, r1
 8005318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800531c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005320:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	7e7b      	ldrb	r3, [r7, #25]
 8005332:	075b      	lsls	r3, r3, #29
 8005334:	69f9      	ldr	r1, [r7, #28]
 8005336:	0148      	lsls	r0, r1, #5
 8005338:	6a39      	ldr	r1, [r7, #32]
 800533a:	4401      	add	r1, r0
 800533c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005340:	4313      	orrs	r3, r2
 8005342:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800535a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	78db      	ldrb	r3, [r3, #3]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d004      	beq.n	800536e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	e003      	b.n	8005376 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005374:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800537c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538a:	461a      	mov	r2, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	e04e      	b.n	8005438 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	78db      	ldrb	r3, [r3, #3]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d149      	bne.n	8005436 <USB_HC_StartXfer+0x276>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d045      	beq.n	8005436 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	79db      	ldrb	r3, [r3, #7]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d830      	bhi.n	8005414 <USB_HC_StartXfer+0x254>
 80053b2:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <USB_HC_StartXfer+0x1f8>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053c9 	.word	0x080053c9
 80053bc:	080053ed 	.word	0x080053ed
 80053c0:	080053c9 	.word	0x080053c9
 80053c4:	080053ed 	.word	0x080053ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	3303      	adds	r3, #3
 80053ce:	089b      	lsrs	r3, r3, #2
 80053d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80053d2:	8afa      	ldrh	r2, [r7, #22]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	b29b      	uxth	r3, r3
 80053da:	429a      	cmp	r2, r3
 80053dc:	d91c      	bls.n	8005418 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	f043 0220 	orr.w	r2, r3, #32
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80053ea:	e015      	b.n	8005418 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	3303      	adds	r3, #3
 80053f2:	089b      	lsrs	r3, r3, #2
 80053f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80053f6:	8afa      	ldrh	r2, [r7, #22]
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	b29b      	uxth	r3, r3
 8005402:	429a      	cmp	r2, r3
 8005404:	d90a      	bls.n	800541c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	619a      	str	r2, [r3, #24]
        }
        break;
 8005412:	e003      	b.n	800541c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005414:	bf00      	nop
 8005416:	e002      	b.n	800541e <USB_HC_StartXfer+0x25e>
        break;
 8005418:	bf00      	nop
 800541a:	e000      	b.n	800541e <USB_HC_StartXfer+0x25e>
        break;
 800541c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	68d9      	ldr	r1, [r3, #12]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	785a      	ldrb	r2, [r3, #1]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	b29b      	uxth	r3, r3
 800542c:	2000      	movs	r0, #0
 800542e:	9000      	str	r0, [sp, #0]
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f7ff fb31 	bl	8004a98 <USB_WritePacket>
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3728      	adds	r7, #40	; 0x28
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	1ff80000 	.word	0x1ff80000

08005444 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	b29b      	uxth	r3, r3
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005466:	b480      	push	{r7}
 8005468:	b089      	sub	sp, #36	; 0x24
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	460b      	mov	r3, r1
 8005470:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	4413      	add	r3, r2
 8005486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	0c9b      	lsrs	r3, r3, #18
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	4413      	add	r3, r2
 800549c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	0fdb      	lsrs	r3, r3, #31
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d104      	bne.n	80054c0 <USB_HC_Halt+0x5a>
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	e0c8      	b.n	8005652 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <USB_HC_Halt+0x66>
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d163      	bne.n	8005594 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	0151      	lsls	r1, r2, #5
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	440a      	add	r2, r1
 80054e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 0320 	and.w	r3, r3, #32
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f040 80ab 	bne.w	8005650 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d133      	bne.n	800556e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	440a      	add	r2, r1
 800551c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005520:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005524:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	440a      	add	r2, r1
 800553c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005544:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3301      	adds	r3, #1
 800554a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005552:	d81d      	bhi.n	8005590 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	4413      	add	r3, r2
 800555c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800556a:	d0ec      	beq.n	8005546 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800556c:	e070      	b.n	8005650 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	440a      	add	r2, r1
 8005584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800558c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800558e:	e05f      	b.n	8005650 <USB_HC_Halt+0x1ea>
            break;
 8005590:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005592:	e05d      	b.n	8005650 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d133      	bne.n	800562c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	0151      	lsls	r1, r2, #5
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	440a      	add	r2, r1
 80055da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	0151      	lsls	r1, r2, #5
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	440a      	add	r2, r1
 80055fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005602:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3301      	adds	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005610:	d81d      	bhi.n	800564e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005628:	d0ec      	beq.n	8005604 <USB_HC_Halt+0x19e>
 800562a:	e011      	b.n	8005650 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	440a      	add	r2, r1
 8005642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	e000      	b.n	8005650 <USB_HC_Halt+0x1ea>
          break;
 800564e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3724      	adds	r7, #36	; 0x24
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005674:	2301      	movs	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	04da      	lsls	r2, r3, #19
 800567c:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <USB_DoPing+0x74>)
 800567e:	4013      	ands	r3, r2
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	440a      	add	r2, r1
 8005688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800568c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005690:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	4413      	add	r3, r2
 800569a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056be:	461a      	mov	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	371c      	adds	r7, #28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	1ff80000 	.word	0x1ff80000

080056d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff f911 	bl	8004914 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056f2:	2110      	movs	r1, #16
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff f96b 	bl	80049d0 <USB_FlushTxFifo>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff f997 	bl	8004a38 <USB_FlushRxFifo>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005714:	2300      	movs	r3, #0
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	e01f      	b.n	800575a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	4413      	add	r3, r2
 8005722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005730:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005738:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005740:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	4413      	add	r3, r2
 800574a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574e:	461a      	mov	r2, r3
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	3301      	adds	r3, #1
 8005758:	61bb      	str	r3, [r7, #24]
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b0f      	cmp	r3, #15
 800575e:	d9dc      	bls.n	800571a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005760:	2300      	movs	r3, #0
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	e034      	b.n	80057d0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	4413      	add	r3, r2
 800576e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800577c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005784:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800578c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	4413      	add	r3, r2
 8005796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579a:	461a      	mov	r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3301      	adds	r3, #1
 80057a4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ac:	d80c      	bhi.n	80057c8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057c4:	d0ec      	beq.n	80057a0 <USB_StopHost+0xc8>
 80057c6:	e000      	b.n	80057ca <USB_StopHost+0xf2>
        break;
 80057c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	3301      	adds	r3, #1
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2b0f      	cmp	r3, #15
 80057d4:	d9c7      	bls.n	8005766 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057dc:	461a      	mov	r2, r3
 80057de:	f04f 33ff 	mov.w	r3, #4294967295
 80057e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff f880 	bl	80048f2 <USB_EnableGlobalInt>

  return ret;
 80057f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b089      	sub	sp, #36	; 0x24
 8005800:	af04      	add	r7, sp, #16
 8005802:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005804:	2301      	movs	r3, #1
 8005806:	2202      	movs	r2, #2
 8005808:	2102      	movs	r1, #2
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fc66 	bl	80060dc <USBH_FindInterface>
 8005810:	4603      	mov	r3, r0
 8005812:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	2bff      	cmp	r3, #255	; 0xff
 8005818:	d002      	beq.n	8005820 <USBH_CDC_InterfaceInit+0x24>
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d901      	bls.n	8005824 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005820:	2302      	movs	r3, #2
 8005822:	e13d      	b.n	8005aa0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fc3b 	bl	80060a4 <USBH_SelectInterface>
 800582e:	4603      	mov	r3, r0
 8005830:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005832:	7bbb      	ldrb	r3, [r7, #14]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005838:	2302      	movs	r3, #2
 800583a:	e131      	b.n	8005aa0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005842:	2050      	movs	r0, #80	; 0x50
 8005844:	f002 fad2 	bl	8007dec <malloc>
 8005848:	4603      	mov	r3, r0
 800584a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800585c:	2302      	movs	r3, #2
 800585e:	e11f      	b.n	8005aa0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005860:	2250      	movs	r2, #80	; 0x50
 8005862:	2100      	movs	r1, #0
 8005864:	68b8      	ldr	r0, [r7, #8]
 8005866:	f002 fb7d 	bl	8007f64 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	211a      	movs	r1, #26
 8005870:	fb01 f303 	mul.w	r3, r1, r3
 8005874:	4413      	add	r3, r2
 8005876:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	b25b      	sxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	da15      	bge.n	80058ae <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	211a      	movs	r1, #26
 8005888:	fb01 f303 	mul.w	r3, r1, r3
 800588c:	4413      	add	r3, r2
 800588e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005892:	781a      	ldrb	r2, [r3, #0]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	211a      	movs	r1, #26
 800589e:	fb01 f303 	mul.w	r3, r1, r3
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80058a8:	881a      	ldrh	r2, [r3, #0]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	785b      	ldrb	r3, [r3, #1]
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 ff2e 	bl	8007716 <USBH_AllocPipe>
 80058ba:	4603      	mov	r3, r0
 80058bc:	461a      	mov	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	7819      	ldrb	r1, [r3, #0]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	7858      	ldrb	r0, [r3, #1]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	8952      	ldrh	r2, [r2, #10]
 80058da:	9202      	str	r2, [sp, #8]
 80058dc:	2203      	movs	r2, #3
 80058de:	9201      	str	r2, [sp, #4]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	4623      	mov	r3, r4
 80058e4:	4602      	mov	r2, r0
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f001 fee6 	bl	80076b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2200      	movs	r2, #0
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f002 f9f5 	bl	8007ce4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80058fa:	2300      	movs	r3, #0
 80058fc:	2200      	movs	r2, #0
 80058fe:	210a      	movs	r1, #10
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fbeb 	bl	80060dc <USBH_FindInterface>
 8005906:	4603      	mov	r3, r0
 8005908:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2bff      	cmp	r3, #255	; 0xff
 800590e:	d002      	beq.n	8005916 <USBH_CDC_InterfaceInit+0x11a>
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d901      	bls.n	800591a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005916:	2302      	movs	r3, #2
 8005918:	e0c2      	b.n	8005aa0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	211a      	movs	r1, #26
 8005920:	fb01 f303 	mul.w	r3, r1, r3
 8005924:	4413      	add	r3, r2
 8005926:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	b25b      	sxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	da16      	bge.n	8005960 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	211a      	movs	r1, #26
 8005938:	fb01 f303 	mul.w	r3, r1, r3
 800593c:	4413      	add	r3, r2
 800593e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005942:	781a      	ldrb	r2, [r3, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	211a      	movs	r1, #26
 800594e:	fb01 f303 	mul.w	r3, r1, r3
 8005952:	4413      	add	r3, r2
 8005954:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005958:	881a      	ldrh	r2, [r3, #0]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	835a      	strh	r2, [r3, #26]
 800595e:	e015      	b.n	800598c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	211a      	movs	r1, #26
 8005966:	fb01 f303 	mul.w	r3, r1, r3
 800596a:	4413      	add	r3, r2
 800596c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005970:	781a      	ldrb	r2, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	211a      	movs	r1, #26
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	4413      	add	r3, r2
 8005982:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005986:	881a      	ldrh	r2, [r3, #0]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	211a      	movs	r1, #26
 8005992:	fb01 f303 	mul.w	r3, r1, r3
 8005996:	4413      	add	r3, r2
 8005998:	f203 3356 	addw	r3, r3, #854	; 0x356
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	b25b      	sxtb	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	da16      	bge.n	80059d2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	211a      	movs	r1, #26
 80059aa:	fb01 f303 	mul.w	r3, r1, r3
 80059ae:	4413      	add	r3, r2
 80059b0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80059b4:	781a      	ldrb	r2, [r3, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	211a      	movs	r1, #26
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80059ca:	881a      	ldrh	r2, [r3, #0]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	835a      	strh	r2, [r3, #26]
 80059d0:	e015      	b.n	80059fe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	211a      	movs	r1, #26
 80059d8:	fb01 f303 	mul.w	r3, r1, r3
 80059dc:	4413      	add	r3, r2
 80059de:	f203 3356 	addw	r3, r3, #854	; 0x356
 80059e2:	781a      	ldrb	r2, [r3, #0]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	211a      	movs	r1, #26
 80059ee:	fb01 f303 	mul.w	r3, r1, r3
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80059f8:	881a      	ldrh	r2, [r3, #0]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	7b9b      	ldrb	r3, [r3, #14]
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f001 fe86 	bl	8007716 <USBH_AllocPipe>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	7bdb      	ldrb	r3, [r3, #15]
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 fe7c 	bl	8007716 <USBH_AllocPipe>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	461a      	mov	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	7b59      	ldrb	r1, [r3, #13]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	7b98      	ldrb	r0, [r3, #14]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	8b12      	ldrh	r2, [r2, #24]
 8005a3e:	9202      	str	r2, [sp, #8]
 8005a40:	2202      	movs	r2, #2
 8005a42:	9201      	str	r2, [sp, #4]
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	4623      	mov	r3, r4
 8005a48:	4602      	mov	r2, r0
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f001 fe34 	bl	80076b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	7b19      	ldrb	r1, [r3, #12]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	7bd8      	ldrb	r0, [r3, #15]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	8b52      	ldrh	r2, [r2, #26]
 8005a68:	9202      	str	r2, [sp, #8]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	9201      	str	r2, [sp, #4]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	4623      	mov	r3, r4
 8005a72:	4602      	mov	r2, r0
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 fe1f 	bl	80076b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	7b5b      	ldrb	r3, [r3, #13]
 8005a86:	2200      	movs	r2, #0
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f002 f92a 	bl	8007ce4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	7b1b      	ldrb	r3, [r3, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f002 f923 	bl	8007ce4 <USBH_LL_SetToggle>

  return USBH_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd90      	pop	{r4, r7, pc}

08005aa8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00e      	beq.n	8005ae0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 fe14 	bl	80076f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 fe3f 	bl	8007758 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	7b1b      	ldrb	r3, [r3, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	7b1b      	ldrb	r3, [r3, #12]
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f001 fe01 	bl	80076f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	7b1b      	ldrb	r3, [r3, #12]
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f001 fe2c 	bl	8007758 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	7b5b      	ldrb	r3, [r3, #13]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00e      	beq.n	8005b2c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	7b5b      	ldrb	r3, [r3, #13]
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f001 fdee 	bl	80076f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	7b5b      	ldrb	r3, [r3, #13]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f001 fe19 	bl	8007758 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f002 f95b 	bl	8007dfc <free>
    phost->pActiveClass->pData = 0U;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	3340      	adds	r3, #64	; 0x40
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f8b1 	bl	8005cda <GetLineCoding>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005b7c:	7afb      	ldrb	r3, [r7, #11]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d105      	bne.n	8005b8e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005b88:	2102      	movs	r1, #2
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d877      	bhi.n	8005cac <USBH_CDC_Process+0x114>
 8005bbc:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <USBH_CDC_Process+0x2c>)
 8005bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc2:	bf00      	nop
 8005bc4:	08005bd9 	.word	0x08005bd9
 8005bc8:	08005bdf 	.word	0x08005bdf
 8005bcc:	08005c0f 	.word	0x08005c0f
 8005bd0:	08005c83 	.word	0x08005c83
 8005bd4:	08005c91 	.word	0x08005c91
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	73fb      	strb	r3, [r7, #15]
      break;
 8005bdc:	e06d      	b.n	8005cba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f897 	bl	8005d18 <SetLineCoding>
 8005bea:	4603      	mov	r3, r0
 8005bec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005bee:	7bbb      	ldrb	r3, [r7, #14]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d104      	bne.n	8005bfe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005bfc:	e058      	b.n	8005cb0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005bfe:	7bbb      	ldrb	r3, [r7, #14]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d055      	beq.n	8005cb0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2204      	movs	r2, #4
 8005c08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005c0c:	e050      	b.n	8005cb0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	3340      	adds	r3, #64	; 0x40
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f860 	bl	8005cda <GetLineCoding>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005c1e:	7bbb      	ldrb	r3, [r7, #14]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d126      	bne.n	8005c72 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c36:	791b      	ldrb	r3, [r3, #4]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d13b      	bne.n	8005cb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c46:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d133      	bne.n	8005cb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c56:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d12b      	bne.n	8005cb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c64:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d124      	bne.n	8005cb4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f958 	bl	8005f20 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005c70:	e020      	b.n	8005cb4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005c72:	7bbb      	ldrb	r3, [r7, #14]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d01d      	beq.n	8005cb4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2204      	movs	r2, #4
 8005c7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005c80:	e018      	b.n	8005cb4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f867 	bl	8005d56 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f8da 	bl	8005e42 <CDC_ProcessReception>
      break;
 8005c8e:	e014      	b.n	8005cba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005c90:	2100      	movs	r1, #0
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 ffef 	bl	8006c76 <USBH_ClrFeature>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005c9c:	7bbb      	ldrb	r3, [r7, #14]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005caa:	e005      	b.n	8005cb8 <USBH_CDC_Process+0x120>

    default:
      break;
 8005cac:	bf00      	nop
 8005cae:	e004      	b.n	8005cba <USBH_CDC_Process+0x122>
      break;
 8005cb0:	bf00      	nop
 8005cb2:	e002      	b.n	8005cba <USBH_CDC_Process+0x122>
      break;
 8005cb4:	bf00      	nop
 8005cb6:	e000      	b.n	8005cba <USBH_CDC_Process+0x122>
      break;
 8005cb8:	bf00      	nop

  }

  return status;
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	22a1      	movs	r2, #161	; 0xa1
 8005ce8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2221      	movs	r2, #33	; 0x21
 8005cee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2207      	movs	r2, #7
 8005d00:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2207      	movs	r2, #7
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f001 fa83 	bl	8007214 <USBH_CtlReq>
 8005d0e:	4603      	mov	r3, r0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2221      	movs	r2, #33	; 0x21
 8005d26:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2207      	movs	r2, #7
 8005d3e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2207      	movs	r2, #7
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f001 fa64 	bl	8007214 <USBH_CtlReq>
 8005d4c:	4603      	mov	r3, r0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b086      	sub	sp, #24
 8005d5a:	af02      	add	r7, sp, #8
 8005d5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d002      	beq.n	8005d7c <CDC_ProcessTransmission+0x26>
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d023      	beq.n	8005dc2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005d7a:	e05e      	b.n	8005e3a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	8b12      	ldrh	r2, [r2, #24]
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d90b      	bls.n	8005da0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	69d9      	ldr	r1, [r3, #28]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8b1a      	ldrh	r2, [r3, #24]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	7b5b      	ldrb	r3, [r3, #13]
 8005d94:	2001      	movs	r0, #1
 8005d96:	9000      	str	r0, [sp, #0]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 fc4a 	bl	8007632 <USBH_BulkSendData>
 8005d9e:	e00b      	b.n	8005db8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	7b5b      	ldrb	r3, [r3, #13]
 8005dae:	2001      	movs	r0, #1
 8005db0:	9000      	str	r0, [sp, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f001 fc3d 	bl	8007632 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005dc0:	e03b      	b.n	8005e3a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	7b5b      	ldrb	r3, [r3, #13]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 ff61 	bl	8007c90 <USBH_LL_GetURBState>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005dd2:	7afb      	ldrb	r3, [r7, #11]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d128      	bne.n	8005e2a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	8b12      	ldrh	r2, [r2, #24]
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d90e      	bls.n	8005e02 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	8b12      	ldrh	r2, [r2, #24]
 8005dec:	1a9a      	subs	r2, r3, r2
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	8b12      	ldrh	r2, [r2, #24]
 8005dfa:	441a      	add	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	61da      	str	r2, [r3, #28]
 8005e00:	e002      	b.n	8005e08 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005e18:	e00e      	b.n	8005e38 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f868 	bl	8005ef8 <USBH_CDC_TransmitCallback>
      break;
 8005e28:	e006      	b.n	8005e38 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005e2a:	7afb      	ldrb	r3, [r7, #11]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d103      	bne.n	8005e38 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005e38:	bf00      	nop
  }
}
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b086      	sub	sp, #24
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005e54:	2300      	movs	r3, #0
 8005e56:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d002      	beq.n	8005e68 <CDC_ProcessReception+0x26>
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d00e      	beq.n	8005e84 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005e66:	e043      	b.n	8005ef0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	6a19      	ldr	r1, [r3, #32]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	8b5a      	ldrh	r2, [r3, #26]
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	7b1b      	ldrb	r3, [r3, #12]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f001 fc01 	bl	800767c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2204      	movs	r2, #4
 8005e7e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005e82:	e035      	b.n	8005ef0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	7b1b      	ldrb	r3, [r3, #12]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f001 ff00 	bl	8007c90 <USBH_LL_GetURBState>
 8005e90:	4603      	mov	r3, r0
 8005e92:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005e94:	7cfb      	ldrb	r3, [r7, #19]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d129      	bne.n	8005eee <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	7b1b      	ldrb	r3, [r3, #12]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f001 fe63 	bl	8007b6c <USBH_LL_GetLastXferSize>
 8005ea6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d016      	beq.n	8005ee0 <CDC_ProcessReception+0x9e>
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	8b5b      	ldrh	r3, [r3, #26]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d910      	bls.n	8005ee0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1ad2      	subs	r2, r2, r3
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	6a1a      	ldr	r2, [r3, #32]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	441a      	add	r2, r3
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2203      	movs	r2, #3
 8005eda:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005ede:	e006      	b.n	8005eee <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f80f 	bl	8005f0c <USBH_CDC_ReceiveCallback>
      break;
 8005eee:	bf00      	nop
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e029      	b.n	8005fa0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	79fa      	ldrb	r2, [r7, #7]
 8005f50:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f81f 	bl	8005fa8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f001 fd33 	bl	8007a04 <USBH_LL_Init>

  return USBH_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e009      	b.n	8005fce <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	33e0      	adds	r3, #224	; 0xe0
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b0f      	cmp	r3, #15
 8005fd2:	d9f2      	bls.n	8005fba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	e009      	b.n	8005fee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ff4:	d3f1      	bcc.n	8005fda <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2240      	movs	r2, #64	; 0x40
 800601a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d016      	beq.n	8006092 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10e      	bne.n	800608c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006074:	1c59      	adds	r1, r3, #1
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	33de      	adds	r3, #222	; 0xde
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
 800608a:	e004      	b.n	8006096 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800608c:	2302      	movs	r3, #2
 800608e:	73fb      	strb	r3, [r7, #15]
 8006090:	e001      	b.n	8006096 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006092:	2302      	movs	r3, #2
 8006094:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006096:	7bfb      	ldrb	r3, [r7, #15]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80060ba:	78fa      	ldrb	r2, [r7, #3]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d204      	bcs.n	80060ca <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	78fa      	ldrb	r2, [r7, #3]
 80060c4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80060c8:	e001      	b.n	80060ce <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80060ca:	2302      	movs	r3, #2
 80060cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	4608      	mov	r0, r1
 80060e6:	4611      	mov	r1, r2
 80060e8:	461a      	mov	r2, r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	70fb      	strb	r3, [r7, #3]
 80060ee:	460b      	mov	r3, r1
 80060f0:	70bb      	strb	r3, [r7, #2]
 80060f2:	4613      	mov	r3, r2
 80060f4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006104:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006106:	e025      	b.n	8006154 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006108:	7dfb      	ldrb	r3, [r7, #23]
 800610a:	221a      	movs	r2, #26
 800610c:	fb02 f303 	mul.w	r3, r2, r3
 8006110:	3308      	adds	r3, #8
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	3302      	adds	r3, #2
 8006118:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	795b      	ldrb	r3, [r3, #5]
 800611e:	78fa      	ldrb	r2, [r7, #3]
 8006120:	429a      	cmp	r2, r3
 8006122:	d002      	beq.n	800612a <USBH_FindInterface+0x4e>
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	2bff      	cmp	r3, #255	; 0xff
 8006128:	d111      	bne.n	800614e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800612e:	78ba      	ldrb	r2, [r7, #2]
 8006130:	429a      	cmp	r2, r3
 8006132:	d002      	beq.n	800613a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006134:	78bb      	ldrb	r3, [r7, #2]
 8006136:	2bff      	cmp	r3, #255	; 0xff
 8006138:	d109      	bne.n	800614e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800613e:	787a      	ldrb	r2, [r7, #1]
 8006140:	429a      	cmp	r2, r3
 8006142:	d002      	beq.n	800614a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006144:	787b      	ldrb	r3, [r7, #1]
 8006146:	2bff      	cmp	r3, #255	; 0xff
 8006148:	d101      	bne.n	800614e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	e006      	b.n	800615c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800614e:	7dfb      	ldrb	r3, [r7, #23]
 8006150:	3301      	adds	r3, #1
 8006152:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d9d6      	bls.n	8006108 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800615a:	23ff      	movs	r3, #255	; 0xff
}
 800615c:	4618      	mov	r0, r3
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 fc83 	bl	8007a7c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006176:	2101      	movs	r1, #1
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 fd9c 	bl	8007cb6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af04      	add	r7, sp, #16
 800618e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006190:	2302      	movs	r3, #2
 8006192:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d102      	bne.n	80061aa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2203      	movs	r2, #3
 80061a8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b0b      	cmp	r3, #11
 80061b2:	f200 81be 	bhi.w	8006532 <USBH_Process+0x3aa>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <USBH_Process+0x34>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061ed 	.word	0x080061ed
 80061c0:	0800621f 	.word	0x0800621f
 80061c4:	08006287 	.word	0x08006287
 80061c8:	080064cd 	.word	0x080064cd
 80061cc:	08006533 	.word	0x08006533
 80061d0:	0800632b 	.word	0x0800632b
 80061d4:	08006473 	.word	0x08006473
 80061d8:	08006361 	.word	0x08006361
 80061dc:	08006381 	.word	0x08006381
 80061e0:	080063a1 	.word	0x080063a1
 80061e4:	080063e5 	.word	0x080063e5
 80061e8:	080064b5 	.word	0x080064b5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 819e 	beq.w	8006536 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006200:	20c8      	movs	r0, #200	; 0xc8
 8006202:	f001 fd9f 	bl	8007d44 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 fc95 	bl	8007b36 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800621c:	e18b      	b.n	8006536 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006224:	2b01      	cmp	r3, #1
 8006226:	d107      	bne.n	8006238 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006236:	e18d      	b.n	8006554 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800623e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006242:	d914      	bls.n	800626e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800624a:	3301      	adds	r3, #1
 800624c:	b2da      	uxtb	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800625a:	2b03      	cmp	r3, #3
 800625c:	d903      	bls.n	8006266 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	220d      	movs	r2, #13
 8006262:	701a      	strb	r2, [r3, #0]
      break;
 8006264:	e176      	b.n	8006554 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	701a      	strb	r2, [r3, #0]
      break;
 800626c:	e172      	b.n	8006554 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006274:	f103 020a 	add.w	r2, r3, #10
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800627e:	200a      	movs	r0, #10
 8006280:	f001 fd60 	bl	8007d44 <USBH_Delay>
      break;
 8006284:	e166      	b.n	8006554 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006296:	2104      	movs	r1, #4
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800629c:	2064      	movs	r0, #100	; 0x64
 800629e:	f001 fd51 	bl	8007d44 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 fc20 	bl	8007ae8 <USBH_LL_GetSpeed>
 80062a8:	4603      	mov	r3, r0
 80062aa:	461a      	mov	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2205      	movs	r2, #5
 80062b6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80062b8:	2100      	movs	r1, #0
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 fa2b 	bl	8007716 <USBH_AllocPipe>
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80062c8:	2180      	movs	r1, #128	; 0x80
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 fa23 	bl	8007716 <USBH_AllocPipe>
 80062d0:	4603      	mov	r3, r0
 80062d2:	461a      	mov	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	7919      	ldrb	r1, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80062ec:	b292      	uxth	r2, r2
 80062ee:	9202      	str	r2, [sp, #8]
 80062f0:	2200      	movs	r2, #0
 80062f2:	9201      	str	r2, [sp, #4]
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	4603      	mov	r3, r0
 80062f8:	2280      	movs	r2, #128	; 0x80
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f001 f9dc 	bl	80076b8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	7959      	ldrb	r1, [r3, #5]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006314:	b292      	uxth	r2, r2
 8006316:	9202      	str	r2, [sp, #8]
 8006318:	2200      	movs	r2, #0
 800631a:	9201      	str	r2, [sp, #4]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	4603      	mov	r3, r0
 8006320:	2200      	movs	r2, #0
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 f9c8 	bl	80076b8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006328:	e114      	b.n	8006554 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f918 	bl	8006560 <USBH_HandleEnum>
 8006330:	4603      	mov	r3, r0
 8006332:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006334:	7bbb      	ldrb	r3, [r7, #14]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	f040 80fe 	bne.w	800653a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800634c:	2b01      	cmp	r3, #1
 800634e:	d103      	bne.n	8006358 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2208      	movs	r2, #8
 8006354:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006356:	e0f0      	b.n	800653a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2207      	movs	r2, #7
 800635c:	701a      	strb	r2, [r3, #0]
      break;
 800635e:	e0ec      	b.n	800653a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 80e9 	beq.w	800653e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006372:	2101      	movs	r1, #1
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2208      	movs	r2, #8
 800637c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800637e:	e0de      	b.n	800653e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006386:	b29b      	uxth	r3, r3
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fc2c 	bl	8006be8 <USBH_SetCfg>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 80d5 	bne.w	8006542 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2209      	movs	r2, #9
 800639c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800639e:	e0d0      	b.n	8006542 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d016      	beq.n	80063dc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80063ae:	2101      	movs	r1, #1
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fc3c 	bl	8006c2e <USBH_SetFeature>
 80063b6:	4603      	mov	r3, r0
 80063b8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80063ba:	7bbb      	ldrb	r3, [r7, #14]
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d103      	bne.n	80063ca <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	220a      	movs	r2, #10
 80063c6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80063c8:	e0bd      	b.n	8006546 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80063ca:	7bbb      	ldrb	r3, [r7, #14]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	f040 80b9 	bne.w	8006546 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	220a      	movs	r2, #10
 80063d8:	701a      	strb	r2, [r3, #0]
      break;
 80063da:	e0b4      	b.n	8006546 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	220a      	movs	r2, #10
 80063e0:	701a      	strb	r2, [r3, #0]
      break;
 80063e2:	e0b0      	b.n	8006546 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 80ad 	beq.w	800654a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80063f8:	2300      	movs	r3, #0
 80063fa:	73fb      	strb	r3, [r7, #15]
 80063fc:	e016      	b.n	800642c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80063fe:	7bfa      	ldrb	r2, [r7, #15]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	32de      	adds	r2, #222	; 0xde
 8006404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006408:	791a      	ldrb	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006410:	429a      	cmp	r2, r3
 8006412:	d108      	bne.n	8006426 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006414:	7bfa      	ldrb	r2, [r7, #15]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	32de      	adds	r2, #222	; 0xde
 800641a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006424:	e005      	b.n	8006432 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	3301      	adds	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0e5      	beq.n	80063fe <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006438:	2b00      	cmp	r3, #0
 800643a:	d016      	beq.n	800646a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	4798      	blx	r3
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2206      	movs	r2, #6
 8006452:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800645a:	2103      	movs	r1, #3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006460:	e073      	b.n	800654a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	220d      	movs	r2, #13
 8006466:	701a      	strb	r2, [r3, #0]
      break;
 8006468:	e06f      	b.n	800654a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	220d      	movs	r2, #13
 800646e:	701a      	strb	r2, [r3, #0]
      break;
 8006470:	e06b      	b.n	800654a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d017      	beq.n	80064ac <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	4798      	blx	r3
 8006488:	4603      	mov	r3, r0
 800648a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	220b      	movs	r2, #11
 8006498:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800649a:	e058      	b.n	800654e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d154      	bne.n	800654e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	220d      	movs	r2, #13
 80064a8:	701a      	strb	r2, [r3, #0]
      break;
 80064aa:	e050      	b.n	800654e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	220d      	movs	r2, #13
 80064b0:	701a      	strb	r2, [r3, #0]
      break;
 80064b2:	e04c      	b.n	800654e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d049      	beq.n	8006552 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	4798      	blx	r3
      }
      break;
 80064ca:	e042      	b.n	8006552 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff fd67 	bl	8005fa8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d009      	beq.n	80064f8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006508:	2105      	movs	r1, #5
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b01      	cmp	r3, #1
 8006518:	d107      	bne.n	800652a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7ff fe20 	bl	8006168 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006528:	e014      	b.n	8006554 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 faa6 	bl	8007a7c <USBH_LL_Start>
      break;
 8006530:	e010      	b.n	8006554 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006532:	bf00      	nop
 8006534:	e00e      	b.n	8006554 <USBH_Process+0x3cc>
      break;
 8006536:	bf00      	nop
 8006538:	e00c      	b.n	8006554 <USBH_Process+0x3cc>
      break;
 800653a:	bf00      	nop
 800653c:	e00a      	b.n	8006554 <USBH_Process+0x3cc>
    break;
 800653e:	bf00      	nop
 8006540:	e008      	b.n	8006554 <USBH_Process+0x3cc>
      break;
 8006542:	bf00      	nop
 8006544:	e006      	b.n	8006554 <USBH_Process+0x3cc>
      break;
 8006546:	bf00      	nop
 8006548:	e004      	b.n	8006554 <USBH_Process+0x3cc>
      break;
 800654a:	bf00      	nop
 800654c:	e002      	b.n	8006554 <USBH_Process+0x3cc>
      break;
 800654e:	bf00      	nop
 8006550:	e000      	b.n	8006554 <USBH_Process+0x3cc>
      break;
 8006552:	bf00      	nop
  }
  return USBH_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop

08006560 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af04      	add	r7, sp, #16
 8006566:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006568:	2301      	movs	r3, #1
 800656a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800656c:	2301      	movs	r3, #1
 800656e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	2b07      	cmp	r3, #7
 8006576:	f200 81c1 	bhi.w	80068fc <USBH_HandleEnum+0x39c>
 800657a:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <USBH_HandleEnum+0x20>)
 800657c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006580:	080065a1 	.word	0x080065a1
 8006584:	0800665f 	.word	0x0800665f
 8006588:	080066c9 	.word	0x080066c9
 800658c:	08006757 	.word	0x08006757
 8006590:	080067c1 	.word	0x080067c1
 8006594:	08006831 	.word	0x08006831
 8006598:	08006877 	.word	0x08006877
 800659c:	080068bd 	.word	0x080068bd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80065a0:	2108      	movs	r1, #8
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fa50 	bl	8006a48 <USBH_Get_DevDesc>
 80065a8:	4603      	mov	r3, r0
 80065aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d130      	bne.n	8006614 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	7919      	ldrb	r1, [r3, #4]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80065d6:	b292      	uxth	r2, r2
 80065d8:	9202      	str	r2, [sp, #8]
 80065da:	2200      	movs	r2, #0
 80065dc:	9201      	str	r2, [sp, #4]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	4603      	mov	r3, r0
 80065e2:	2280      	movs	r2, #128	; 0x80
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 f867 	bl	80076b8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	7959      	ldrb	r1, [r3, #5]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065fe:	b292      	uxth	r2, r2
 8006600:	9202      	str	r2, [sp, #8]
 8006602:	2200      	movs	r2, #0
 8006604:	9201      	str	r2, [sp, #4]
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	4603      	mov	r3, r0
 800660a:	2200      	movs	r2, #0
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 f853 	bl	80076b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006612:	e175      	b.n	8006900 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b03      	cmp	r3, #3
 8006618:	f040 8172 	bne.w	8006900 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006622:	3301      	adds	r3, #1
 8006624:	b2da      	uxtb	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006632:	2b03      	cmp	r3, #3
 8006634:	d903      	bls.n	800663e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	220d      	movs	r2, #13
 800663a:	701a      	strb	r2, [r3, #0]
      break;
 800663c:	e160      	b.n	8006900 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	795b      	ldrb	r3, [r3, #5]
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 f887 	bl	8007758 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	791b      	ldrb	r3, [r3, #4]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f001 f881 	bl	8007758 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	701a      	strb	r2, [r3, #0]
      break;
 800665c:	e150      	b.n	8006900 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800665e:	2112      	movs	r1, #18
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f9f1 	bl	8006a48 <USBH_Get_DevDesc>
 8006666:	4603      	mov	r3, r0
 8006668:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d103      	bne.n	8006678 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006676:	e145      	b.n	8006904 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	2b03      	cmp	r3, #3
 800667c:	f040 8142 	bne.w	8006904 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006686:	3301      	adds	r3, #1
 8006688:	b2da      	uxtb	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006696:	2b03      	cmp	r3, #3
 8006698:	d903      	bls.n	80066a2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	220d      	movs	r2, #13
 800669e:	701a      	strb	r2, [r3, #0]
      break;
 80066a0:	e130      	b.n	8006904 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	795b      	ldrb	r3, [r3, #5]
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 f855 	bl	8007758 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	791b      	ldrb	r3, [r3, #4]
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 f84f 	bl	8007758 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	701a      	strb	r2, [r3, #0]
      break;
 80066c6:	e11d      	b.n	8006904 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80066c8:	2101      	movs	r1, #1
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa68 	bl	8006ba0 <USBH_SetAddress>
 80066d0:	4603      	mov	r3, r0
 80066d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d132      	bne.n	8006740 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80066da:	2002      	movs	r0, #2
 80066dc:	f001 fb32 	bl	8007d44 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2203      	movs	r2, #3
 80066ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	7919      	ldrb	r1, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006702:	b292      	uxth	r2, r2
 8006704:	9202      	str	r2, [sp, #8]
 8006706:	2200      	movs	r2, #0
 8006708:	9201      	str	r2, [sp, #4]
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	4603      	mov	r3, r0
 800670e:	2280      	movs	r2, #128	; 0x80
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 ffd1 	bl	80076b8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	7959      	ldrb	r1, [r3, #5]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800672a:	b292      	uxth	r2, r2
 800672c:	9202      	str	r2, [sp, #8]
 800672e:	2200      	movs	r2, #0
 8006730:	9201      	str	r2, [sp, #4]
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	4603      	mov	r3, r0
 8006736:	2200      	movs	r2, #0
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 ffbd 	bl	80076b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800673e:	e0e3      	b.n	8006908 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	2b03      	cmp	r3, #3
 8006744:	f040 80e0 	bne.w	8006908 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	220d      	movs	r2, #13
 800674c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	705a      	strb	r2, [r3, #1]
      break;
 8006754:	e0d8      	b.n	8006908 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006756:	2109      	movs	r1, #9
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f99d 	bl	8006a98 <USBH_Get_CfgDesc>
 800675e:	4603      	mov	r3, r0
 8006760:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006762:	7bbb      	ldrb	r3, [r7, #14]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d103      	bne.n	8006770 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2204      	movs	r2, #4
 800676c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800676e:	e0cd      	b.n	800690c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006770:	7bbb      	ldrb	r3, [r7, #14]
 8006772:	2b03      	cmp	r3, #3
 8006774:	f040 80ca 	bne.w	800690c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800677e:	3301      	adds	r3, #1
 8006780:	b2da      	uxtb	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800678e:	2b03      	cmp	r3, #3
 8006790:	d903      	bls.n	800679a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	220d      	movs	r2, #13
 8006796:	701a      	strb	r2, [r3, #0]
      break;
 8006798:	e0b8      	b.n	800690c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	795b      	ldrb	r3, [r3, #5]
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 ffd9 	bl	8007758 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	791b      	ldrb	r3, [r3, #4]
 80067aa:	4619      	mov	r1, r3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 ffd3 	bl	8007758 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
      break;
 80067be:	e0a5      	b.n	800690c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f965 	bl	8006a98 <USBH_Get_CfgDesc>
 80067ce:	4603      	mov	r3, r0
 80067d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d103      	bne.n	80067e0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2205      	movs	r2, #5
 80067dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80067de:	e097      	b.n	8006910 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067e0:	7bbb      	ldrb	r3, [r7, #14]
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	f040 8094 	bne.w	8006910 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80067ee:	3301      	adds	r3, #1
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d903      	bls.n	800680a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	220d      	movs	r2, #13
 8006806:	701a      	strb	r2, [r3, #0]
      break;
 8006808:	e082      	b.n	8006910 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	795b      	ldrb	r3, [r3, #5]
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 ffa1 	bl	8007758 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	791b      	ldrb	r3, [r3, #4]
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 ff9b 	bl	8007758 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	701a      	strb	r2, [r3, #0]
      break;
 800682e:	e06f      	b.n	8006910 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006836:	2b00      	cmp	r3, #0
 8006838:	d019      	beq.n	800686e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006846:	23ff      	movs	r3, #255	; 0xff
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f949 	bl	8006ae0 <USBH_Get_StringDesc>
 800684e:	4603      	mov	r3, r0
 8006850:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006852:	7bbb      	ldrb	r3, [r7, #14]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d103      	bne.n	8006860 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2206      	movs	r2, #6
 800685c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800685e:	e059      	b.n	8006914 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	2b03      	cmp	r3, #3
 8006864:	d156      	bne.n	8006914 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2206      	movs	r2, #6
 800686a:	705a      	strb	r2, [r3, #1]
      break;
 800686c:	e052      	b.n	8006914 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2206      	movs	r2, #6
 8006872:	705a      	strb	r2, [r3, #1]
      break;
 8006874:	e04e      	b.n	8006914 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800687c:	2b00      	cmp	r3, #0
 800687e:	d019      	beq.n	80068b4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800688c:	23ff      	movs	r3, #255	; 0xff
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f926 	bl	8006ae0 <USBH_Get_StringDesc>
 8006894:	4603      	mov	r3, r0
 8006896:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006898:	7bbb      	ldrb	r3, [r7, #14]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d103      	bne.n	80068a6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2207      	movs	r2, #7
 80068a2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80068a4:	e038      	b.n	8006918 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d135      	bne.n	8006918 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2207      	movs	r2, #7
 80068b0:	705a      	strb	r2, [r3, #1]
      break;
 80068b2:	e031      	b.n	8006918 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2207      	movs	r2, #7
 80068b8:	705a      	strb	r2, [r3, #1]
      break;
 80068ba:	e02d      	b.n	8006918 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d017      	beq.n	80068f6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80068d2:	23ff      	movs	r3, #255	; 0xff
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f903 	bl	8006ae0 <USBH_Get_StringDesc>
 80068da:	4603      	mov	r3, r0
 80068dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80068de:	7bbb      	ldrb	r3, [r7, #14]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d102      	bne.n	80068ea <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80068e8:	e018      	b.n	800691c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d115      	bne.n	800691c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80068f0:	2300      	movs	r3, #0
 80068f2:	73fb      	strb	r3, [r7, #15]
      break;
 80068f4:	e012      	b.n	800691c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	73fb      	strb	r3, [r7, #15]
      break;
 80068fa:	e00f      	b.n	800691c <USBH_HandleEnum+0x3bc>

    default:
      break;
 80068fc:	bf00      	nop
 80068fe:	e00e      	b.n	800691e <USBH_HandleEnum+0x3be>
      break;
 8006900:	bf00      	nop
 8006902:	e00c      	b.n	800691e <USBH_HandleEnum+0x3be>
      break;
 8006904:	bf00      	nop
 8006906:	e00a      	b.n	800691e <USBH_HandleEnum+0x3be>
      break;
 8006908:	bf00      	nop
 800690a:	e008      	b.n	800691e <USBH_HandleEnum+0x3be>
      break;
 800690c:	bf00      	nop
 800690e:	e006      	b.n	800691e <USBH_HandleEnum+0x3be>
      break;
 8006910:	bf00      	nop
 8006912:	e004      	b.n	800691e <USBH_HandleEnum+0x3be>
      break;
 8006914:	bf00      	nop
 8006916:	e002      	b.n	800691e <USBH_HandleEnum+0x3be>
      break;
 8006918:	bf00      	nop
 800691a:	e000      	b.n	800691e <USBH_HandleEnum+0x3be>
      break;
 800691c:	bf00      	nop
  }
  return Status;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f804 	bl	800696a <USBH_HandleSof>
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b0b      	cmp	r3, #11
 800697a:	d10a      	bne.n	8006992 <USBH_HandleSof+0x28>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
  }
}
 8006992:	bf00      	nop
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80069aa:	bf00      	nop
}
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80069c6:	bf00      	nop
}
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f846 	bl	8007ab2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	791b      	ldrb	r3, [r3, #4]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fe93 	bl	8007758 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	795b      	ldrb	r3, [r3, #5]
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fe8d 	bl	8007758 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	4613      	mov	r3, r2
 8006a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a66:	2100      	movs	r1, #0
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f864 	bl	8006b36 <USBH_GetDescriptor>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10a      	bne.n	8006a8e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a84:	78fa      	ldrb	r2, [r7, #3]
 8006a86:	b292      	uxth	r2, r2
 8006a88:	4619      	mov	r1, r3
 8006a8a:	f000 f919 	bl	8006cc0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	331c      	adds	r3, #28
 8006aa8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006aaa:	887b      	ldrh	r3, [r7, #2]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f83d 	bl	8006b36 <USBH_GetDescriptor>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d107      	bne.n	8006ad6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006ac6:	887b      	ldrh	r3, [r7, #2]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f989 	bl	8006de4 <USBH_ParseCfgDesc>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	607a      	str	r2, [r7, #4]
 8006aea:	461a      	mov	r2, r3
 8006aec:	460b      	mov	r3, r1
 8006aee:	72fb      	strb	r3, [r7, #11]
 8006af0:	4613      	mov	r3, r2
 8006af2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006af4:	7afb      	ldrb	r3, [r7, #11]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006afc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006b04:	893b      	ldrh	r3, [r7, #8]
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f812 	bl	8006b36 <USBH_GetDescriptor>
 8006b12:	4603      	mov	r3, r0
 8006b14:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006b16:	7dfb      	ldrb	r3, [r7, #23]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d107      	bne.n	8006b2c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b22:	893a      	ldrh	r2, [r7, #8]
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fb26 	bl	8007178 <USBH_ParseStringDesc>
  }

  return status;
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	607b      	str	r3, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	72fb      	strb	r3, [r7, #11]
 8006b44:	4613      	mov	r3, r2
 8006b46:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	789b      	ldrb	r3, [r3, #2]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d11c      	bne.n	8006b8a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006b50:	7afb      	ldrb	r3, [r7, #11]
 8006b52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2206      	movs	r2, #6
 8006b60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	893a      	ldrh	r2, [r7, #8]
 8006b66:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006b68:	893b      	ldrh	r3, [r7, #8]
 8006b6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b72:	d104      	bne.n	8006b7e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f240 4209 	movw	r2, #1033	; 0x409
 8006b7a:	829a      	strh	r2, [r3, #20]
 8006b7c:	e002      	b.n	8006b84 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8b3a      	ldrh	r2, [r7, #24]
 8006b88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006b8a:	8b3b      	ldrh	r3, [r7, #24]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 fb3f 	bl	8007214 <USBH_CtlReq>
 8006b96:	4603      	mov	r3, r0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	789b      	ldrb	r3, [r3, #2]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d10f      	bne.n	8006bd4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2205      	movs	r2, #5
 8006bbe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fb1b 	bl	8007214 <USBH_CtlReq>
 8006bde:	4603      	mov	r3, r0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	789b      	ldrb	r3, [r3, #2]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d10e      	bne.n	8006c1a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2209      	movs	r2, #9
 8006c06:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	887a      	ldrh	r2, [r7, #2]
 8006c0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 faf8 	bl	8007214 <USBH_CtlReq>
 8006c24:	4603      	mov	r3, r0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	789b      	ldrb	r3, [r3, #2]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d10f      	bne.n	8006c62 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2203      	movs	r2, #3
 8006c4c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006c62:	2200      	movs	r2, #0
 8006c64:	2100      	movs	r1, #0
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fad4 	bl	8007214 <USBH_CtlReq>
 8006c6c:	4603      	mov	r3, r0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	789b      	ldrb	r3, [r3, #2]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d10f      	bne.n	8006caa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006caa:	2200      	movs	r2, #0
 8006cac:	2100      	movs	r1, #0
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fab0 	bl	8007214 <USBH_CtlReq>
 8006cb4:	4603      	mov	r3, r0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	781a      	ldrb	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	785a      	ldrb	r2, [r3, #1]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	3302      	adds	r3, #2
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	3303      	adds	r3, #3
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	791a      	ldrb	r2, [r3, #4]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	795a      	ldrb	r2, [r3, #5]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	799a      	ldrb	r2, [r3, #6]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	79da      	ldrb	r2, [r3, #7]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	79db      	ldrb	r3, [r3, #7]
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	dc0f      	bgt.n	8006d42 <USBH_ParseDevDesc+0x82>
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	db14      	blt.n	8006d50 <USBH_ParseDevDesc+0x90>
 8006d26:	3b08      	subs	r3, #8
 8006d28:	4a2d      	ldr	r2, [pc, #180]	; (8006de0 <USBH_ParseDevDesc+0x120>)
 8006d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	bf14      	ite	ne
 8006d36:	2301      	movne	r3, #1
 8006d38:	2300      	moveq	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d102      	bne.n	8006d46 <USBH_ParseDevDesc+0x86>
 8006d40:	e006      	b.n	8006d50 <USBH_ParseDevDesc+0x90>
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d104      	bne.n	8006d50 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	79da      	ldrb	r2, [r3, #7]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	71da      	strb	r2, [r3, #7]
      break;
 8006d4e:	e003      	b.n	8006d58 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2240      	movs	r2, #64	; 0x40
 8006d54:	71da      	strb	r2, [r3, #7]
      break;
 8006d56:	bf00      	nop
  }

  if (length > 8U)
 8006d58:	88fb      	ldrh	r3, [r7, #6]
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d939      	bls.n	8006dd2 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	3308      	adds	r3, #8
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	3309      	adds	r3, #9
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	021b      	lsls	r3, r3, #8
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	4313      	orrs	r3, r2
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	330a      	adds	r3, #10
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	330b      	adds	r3, #11
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	330d      	adds	r3, #13
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	4313      	orrs	r3, r2
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	7b9a      	ldrb	r2, [r3, #14]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	7bda      	ldrb	r2, [r3, #15]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	7c1a      	ldrb	r2, [r3, #16]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	7c5a      	ldrb	r2, [r3, #17]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	745a      	strb	r2, [r3, #17]
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	01000101 	.word	0x01000101

08006de4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08c      	sub	sp, #48	; 0x30
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4613      	mov	r3, r2
 8006df0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006df8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	785a      	ldrb	r2, [r3, #1]
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	3302      	adds	r3, #2
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	3303      	adds	r3, #3
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	021b      	lsls	r3, r3, #8
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e40:	bf28      	it	cs
 8006e42:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	791a      	ldrb	r2, [r3, #4]
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	795a      	ldrb	r2, [r3, #5]
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	799a      	ldrb	r2, [r3, #6]
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	79da      	ldrb	r2, [r3, #7]
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	7a1a      	ldrb	r2, [r3, #8]
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b09      	cmp	r3, #9
 8006e7a:	d002      	beq.n	8006e82 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	2209      	movs	r2, #9
 8006e80:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	2b09      	cmp	r3, #9
 8006e86:	f240 809d 	bls.w	8006fc4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006e8a:	2309      	movs	r3, #9
 8006e8c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006e92:	e081      	b.n	8006f98 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006e94:	f107 0316 	add.w	r3, r7, #22
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e9c:	f000 f99f 	bl	80071de <USBH_GetNextDesc>
 8006ea0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	785b      	ldrb	r3, [r3, #1]
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d176      	bne.n	8006f98 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b09      	cmp	r3, #9
 8006eb0:	d002      	beq.n	8006eb8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	2209      	movs	r2, #9
 8006eb6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ebc:	221a      	movs	r2, #26
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	6a3a      	ldr	r2, [r7, #32]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	3302      	adds	r3, #2
 8006eca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ece:	69f8      	ldr	r0, [r7, #28]
 8006ed0:	f000 f87e 	bl	8006fd0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ede:	e043      	b.n	8006f68 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006ee0:	f107 0316 	add.w	r3, r7, #22
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ee8:	f000 f979 	bl	80071de <USBH_GetNextDesc>
 8006eec:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	d138      	bne.n	8006f68 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	795b      	ldrb	r3, [r3, #5]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d10f      	bne.n	8006f1e <USBH_ParseCfgDesc+0x13a>
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	799b      	ldrb	r3, [r3, #6]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d10b      	bne.n	8006f1e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	79db      	ldrb	r3, [r3, #7]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10f      	bne.n	8006f2e <USBH_ParseCfgDesc+0x14a>
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b09      	cmp	r3, #9
 8006f14:	d00b      	beq.n	8006f2e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	2209      	movs	r2, #9
 8006f1a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006f1c:	e007      	b.n	8006f2e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b07      	cmp	r3, #7
 8006f24:	d004      	beq.n	8006f30 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f28:	2207      	movs	r2, #7
 8006f2a:	701a      	strb	r2, [r3, #0]
 8006f2c:	e000      	b.n	8006f30 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006f2e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f34:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006f38:	3201      	adds	r2, #1
 8006f3a:	00d2      	lsls	r2, r2, #3
 8006f3c:	211a      	movs	r1, #26
 8006f3e:	fb01 f303 	mul.w	r3, r1, r3
 8006f42:	4413      	add	r3, r2
 8006f44:	3308      	adds	r3, #8
 8006f46:	6a3a      	ldr	r2, [r7, #32]
 8006f48:	4413      	add	r3, r2
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f50:	69b9      	ldr	r1, [r7, #24]
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 f86b 	bl	800702e <USBH_ParseEPDesc>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f62:	3301      	adds	r3, #1
 8006f64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	791b      	ldrb	r3, [r3, #4]
 8006f6c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d204      	bcs.n	8006f7e <USBH_ParseCfgDesc+0x19a>
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	885a      	ldrh	r2, [r3, #2]
 8006f78:	8afb      	ldrh	r3, [r7, #22]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d8b0      	bhi.n	8006ee0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	791b      	ldrb	r3, [r3, #4]
 8006f82:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d201      	bcs.n	8006f8e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e01c      	b.n	8006fc8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f92:	3301      	adds	r3, #1
 8006f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d805      	bhi.n	8006fac <USBH_ParseCfgDesc+0x1c8>
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	885a      	ldrh	r2, [r3, #2]
 8006fa4:	8afb      	ldrh	r3, [r7, #22]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	f63f af74 	bhi.w	8006e94 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	791b      	ldrb	r3, [r3, #4]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	bf28      	it	cs
 8006fb4:	2302      	movcs	r3, #2
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d201      	bcs.n	8006fc4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e001      	b.n	8006fc8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006fc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3730      	adds	r7, #48	; 0x30
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781a      	ldrb	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	785a      	ldrb	r2, [r3, #1]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	789a      	ldrb	r2, [r3, #2]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	78da      	ldrb	r2, [r3, #3]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	791a      	ldrb	r2, [r3, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	795a      	ldrb	r2, [r3, #5]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	799a      	ldrb	r2, [r3, #6]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	79da      	ldrb	r2, [r3, #7]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	7a1a      	ldrb	r2, [r3, #8]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	721a      	strb	r2, [r3, #8]
}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800702e:	b480      	push	{r7}
 8007030:	b087      	sub	sp, #28
 8007032:	af00      	add	r7, sp, #0
 8007034:	60f8      	str	r0, [r7, #12]
 8007036:	60b9      	str	r1, [r7, #8]
 8007038:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	781a      	ldrb	r2, [r3, #0]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	785a      	ldrb	r2, [r3, #1]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	789a      	ldrb	r2, [r3, #2]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	78da      	ldrb	r2, [r3, #3]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3304      	adds	r3, #4
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	b29a      	uxth	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3305      	adds	r3, #5
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	021b      	lsls	r3, r3, #8
 8007070:	b29b      	uxth	r3, r3
 8007072:	4313      	orrs	r3, r2
 8007074:	b29a      	uxth	r2, r3
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	799a      	ldrb	r2, [r3, #6]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	889b      	ldrh	r3, [r3, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d102      	bne.n	8007090 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800708a:	2303      	movs	r3, #3
 800708c:	75fb      	strb	r3, [r7, #23]
 800708e:	e033      	b.n	80070f8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	889b      	ldrh	r3, [r3, #4]
 8007094:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007098:	f023 0307 	bic.w	r3, r3, #7
 800709c:	b29a      	uxth	r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	889b      	ldrh	r3, [r3, #4]
 80070a6:	b21a      	sxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3304      	adds	r3, #4
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	b299      	uxth	r1, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3305      	adds	r3, #5
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	430b      	orrs	r3, r1
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d110      	bne.n	80070ea <USBH_ParseEPDesc+0xbc>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3304      	adds	r3, #4
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	b299      	uxth	r1, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3305      	adds	r3, #5
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	021b      	lsls	r3, r3, #8
 80070da:	b29b      	uxth	r3, r3
 80070dc:	430b      	orrs	r3, r1
 80070de:	b29b      	uxth	r3, r3
 80070e0:	b21b      	sxth	r3, r3
 80070e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070e6:	b21b      	sxth	r3, r3
 80070e8:	e001      	b.n	80070ee <USBH_ParseEPDesc+0xc0>
 80070ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070ee:	4313      	orrs	r3, r2
 80070f0:	b21b      	sxth	r3, r3
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d116      	bne.n	8007130 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	78db      	ldrb	r3, [r3, #3]
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	2b01      	cmp	r3, #1
 800710c:	d005      	beq.n	800711a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	78db      	ldrb	r3, [r3, #3]
 8007112:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007116:	2b03      	cmp	r3, #3
 8007118:	d127      	bne.n	800716a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	799b      	ldrb	r3, [r3, #6]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <USBH_ParseEPDesc+0xfc>
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	799b      	ldrb	r3, [r3, #6]
 8007126:	2b10      	cmp	r3, #16
 8007128:	d91f      	bls.n	800716a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800712a:	2303      	movs	r3, #3
 800712c:	75fb      	strb	r3, [r7, #23]
 800712e:	e01c      	b.n	800716a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	78db      	ldrb	r3, [r3, #3]
 8007134:	f003 0303 	and.w	r3, r3, #3
 8007138:	2b01      	cmp	r3, #1
 800713a:	d10a      	bne.n	8007152 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	799b      	ldrb	r3, [r3, #6]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <USBH_ParseEPDesc+0x11e>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	799b      	ldrb	r3, [r3, #6]
 8007148:	2b10      	cmp	r3, #16
 800714a:	d90e      	bls.n	800716a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800714c:	2303      	movs	r3, #3
 800714e:	75fb      	strb	r3, [r7, #23]
 8007150:	e00b      	b.n	800716a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	78db      	ldrb	r3, [r3, #3]
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	2b03      	cmp	r3, #3
 800715c:	d105      	bne.n	800716a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	799b      	ldrb	r3, [r3, #6]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007166:	2303      	movs	r3, #3
 8007168:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
}
 800716c:	4618      	mov	r0, r3
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	4613      	mov	r3, r2
 8007184:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3301      	adds	r3, #1
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b03      	cmp	r3, #3
 800718e:	d120      	bne.n	80071d2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	1e9a      	subs	r2, r3, #2
 8007196:	88fb      	ldrh	r3, [r7, #6]
 8007198:	4293      	cmp	r3, r2
 800719a:	bf28      	it	cs
 800719c:	4613      	movcs	r3, r2
 800719e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3302      	adds	r3, #2
 80071a4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80071a6:	2300      	movs	r3, #0
 80071a8:	82fb      	strh	r3, [r7, #22]
 80071aa:	e00b      	b.n	80071c4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80071ac:	8afb      	ldrh	r3, [r7, #22]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4413      	add	r3, r2
 80071b2:	781a      	ldrb	r2, [r3, #0]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	3301      	adds	r3, #1
 80071bc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80071be:	8afb      	ldrh	r3, [r7, #22]
 80071c0:	3302      	adds	r3, #2
 80071c2:	82fb      	strh	r3, [r7, #22]
 80071c4:	8afa      	ldrh	r2, [r7, #22]
 80071c6:	8abb      	ldrh	r3, [r7, #20]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d3ef      	bcc.n	80071ac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2200      	movs	r2, #0
 80071d0:	701a      	strb	r2, [r3, #0]
  }
}
 80071d2:	bf00      	nop
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80071de:	b480      	push	{r7}
 80071e0:	b085      	sub	sp, #20
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	881a      	ldrh	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	4413      	add	r3, r2
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4413      	add	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007206:	68fb      	ldr	r3, [r7, #12]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007222:	2301      	movs	r3, #1
 8007224:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	789b      	ldrb	r3, [r3, #2]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d002      	beq.n	8007234 <USBH_CtlReq+0x20>
 800722e:	2b02      	cmp	r3, #2
 8007230:	d00f      	beq.n	8007252 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007232:	e027      	b.n	8007284 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	88fa      	ldrh	r2, [r7, #6]
 800723e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2202      	movs	r2, #2
 800724a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800724c:	2301      	movs	r3, #1
 800724e:	75fb      	strb	r3, [r7, #23]
      break;
 8007250:	e018      	b.n	8007284 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f81c 	bl	8007290 <USBH_HandleControl>
 8007258:	4603      	mov	r3, r0
 800725a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <USBH_CtlReq+0x54>
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d106      	bne.n	8007276 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2201      	movs	r2, #1
 800726c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	761a      	strb	r2, [r3, #24]
      break;
 8007274:	e005      	b.n	8007282 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	2b02      	cmp	r3, #2
 800727a:	d102      	bne.n	8007282 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2201      	movs	r2, #1
 8007280:	709a      	strb	r2, [r3, #2]
      break;
 8007282:	bf00      	nop
  }
  return status;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af02      	add	r7, sp, #8
 8007296:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007298:	2301      	movs	r3, #1
 800729a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800729c:	2300      	movs	r3, #0
 800729e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	7e1b      	ldrb	r3, [r3, #24]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	2b0a      	cmp	r3, #10
 80072a8:	f200 8156 	bhi.w	8007558 <USBH_HandleControl+0x2c8>
 80072ac:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <USBH_HandleControl+0x24>)
 80072ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b2:	bf00      	nop
 80072b4:	080072e1 	.word	0x080072e1
 80072b8:	080072fb 	.word	0x080072fb
 80072bc:	08007365 	.word	0x08007365
 80072c0:	0800738b 	.word	0x0800738b
 80072c4:	080073c3 	.word	0x080073c3
 80072c8:	080073ed 	.word	0x080073ed
 80072cc:	0800743f 	.word	0x0800743f
 80072d0:	08007461 	.word	0x08007461
 80072d4:	0800749d 	.word	0x0800749d
 80072d8:	080074c3 	.word	0x080074c3
 80072dc:	08007501 	.word	0x08007501
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f103 0110 	add.w	r1, r3, #16
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	795b      	ldrb	r3, [r3, #5]
 80072ea:	461a      	mov	r2, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f943 	bl	8007578 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2202      	movs	r2, #2
 80072f6:	761a      	strb	r2, [r3, #24]
      break;
 80072f8:	e139      	b.n	800756e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	795b      	ldrb	r3, [r3, #5]
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fcc5 	bl	8007c90 <USBH_LL_GetURBState>
 8007306:	4603      	mov	r3, r0
 8007308:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d11e      	bne.n	800734e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	7c1b      	ldrb	r3, [r3, #16]
 8007314:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007318:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	8adb      	ldrh	r3, [r3, #22]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007322:	7b7b      	ldrb	r3, [r7, #13]
 8007324:	2b80      	cmp	r3, #128	; 0x80
 8007326:	d103      	bne.n	8007330 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2203      	movs	r2, #3
 800732c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800732e:	e115      	b.n	800755c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2205      	movs	r2, #5
 8007334:	761a      	strb	r2, [r3, #24]
      break;
 8007336:	e111      	b.n	800755c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007338:	7b7b      	ldrb	r3, [r7, #13]
 800733a:	2b80      	cmp	r3, #128	; 0x80
 800733c:	d103      	bne.n	8007346 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2209      	movs	r2, #9
 8007342:	761a      	strb	r2, [r3, #24]
      break;
 8007344:	e10a      	b.n	800755c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2207      	movs	r2, #7
 800734a:	761a      	strb	r2, [r3, #24]
      break;
 800734c:	e106      	b.n	800755c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	2b04      	cmp	r3, #4
 8007352:	d003      	beq.n	800735c <USBH_HandleControl+0xcc>
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	2b02      	cmp	r3, #2
 8007358:	f040 8100 	bne.w	800755c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	220b      	movs	r2, #11
 8007360:	761a      	strb	r2, [r3, #24]
      break;
 8007362:	e0fb      	b.n	800755c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800736a:	b29a      	uxth	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6899      	ldr	r1, [r3, #8]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	899a      	ldrh	r2, [r3, #12]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	791b      	ldrb	r3, [r3, #4]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f93a 	bl	80075f6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2204      	movs	r2, #4
 8007386:	761a      	strb	r2, [r3, #24]
      break;
 8007388:	e0f1      	b.n	800756e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	791b      	ldrb	r3, [r3, #4]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fc7d 	bl	8007c90 <USBH_LL_GetURBState>
 8007396:	4603      	mov	r3, r0
 8007398:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d102      	bne.n	80073a6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2209      	movs	r2, #9
 80073a4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	2b05      	cmp	r3, #5
 80073aa:	d102      	bne.n	80073b2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80073ac:	2303      	movs	r3, #3
 80073ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80073b0:	e0d6      	b.n	8007560 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	f040 80d3 	bne.w	8007560 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	220b      	movs	r2, #11
 80073be:	761a      	strb	r2, [r3, #24]
      break;
 80073c0:	e0ce      	b.n	8007560 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6899      	ldr	r1, [r3, #8]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	899a      	ldrh	r2, [r3, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	795b      	ldrb	r3, [r3, #5]
 80073ce:	2001      	movs	r0, #1
 80073d0:	9000      	str	r0, [sp, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f8ea 	bl	80075ac <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073de:	b29a      	uxth	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2206      	movs	r2, #6
 80073e8:	761a      	strb	r2, [r3, #24]
      break;
 80073ea:	e0c0      	b.n	800756e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	795b      	ldrb	r3, [r3, #5]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fc4c 	bl	8007c90 <USBH_LL_GetURBState>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d103      	bne.n	800740a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2207      	movs	r2, #7
 8007406:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007408:	e0ac      	b.n	8007564 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	2b05      	cmp	r3, #5
 800740e:	d105      	bne.n	800741c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	220c      	movs	r2, #12
 8007414:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007416:	2303      	movs	r3, #3
 8007418:	73fb      	strb	r3, [r7, #15]
      break;
 800741a:	e0a3      	b.n	8007564 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d103      	bne.n	800742a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2205      	movs	r2, #5
 8007426:	761a      	strb	r2, [r3, #24]
      break;
 8007428:	e09c      	b.n	8007564 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	2b04      	cmp	r3, #4
 800742e:	f040 8099 	bne.w	8007564 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	220b      	movs	r2, #11
 8007436:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007438:	2302      	movs	r3, #2
 800743a:	73fb      	strb	r3, [r7, #15]
      break;
 800743c:	e092      	b.n	8007564 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	791b      	ldrb	r3, [r3, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	2100      	movs	r1, #0
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f8d5 	bl	80075f6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007452:	b29a      	uxth	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2208      	movs	r2, #8
 800745c:	761a      	strb	r2, [r3, #24]

      break;
 800745e:	e086      	b.n	800756e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	791b      	ldrb	r3, [r3, #4]
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fc12 	bl	8007c90 <USBH_LL_GetURBState>
 800746c:	4603      	mov	r3, r0
 800746e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d105      	bne.n	8007482 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	220d      	movs	r2, #13
 800747a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007480:	e072      	b.n	8007568 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	2b04      	cmp	r3, #4
 8007486:	d103      	bne.n	8007490 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	220b      	movs	r2, #11
 800748c:	761a      	strb	r2, [r3, #24]
      break;
 800748e:	e06b      	b.n	8007568 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	2b05      	cmp	r3, #5
 8007494:	d168      	bne.n	8007568 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007496:	2303      	movs	r3, #3
 8007498:	73fb      	strb	r3, [r7, #15]
      break;
 800749a:	e065      	b.n	8007568 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	795b      	ldrb	r3, [r3, #5]
 80074a0:	2201      	movs	r2, #1
 80074a2:	9200      	str	r2, [sp, #0]
 80074a4:	2200      	movs	r2, #0
 80074a6:	2100      	movs	r1, #0
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f87f 	bl	80075ac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	220a      	movs	r2, #10
 80074be:	761a      	strb	r2, [r3, #24]
      break;
 80074c0:	e055      	b.n	800756e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	795b      	ldrb	r3, [r3, #5]
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fbe1 	bl	8007c90 <USBH_LL_GetURBState>
 80074ce:	4603      	mov	r3, r0
 80074d0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80074d2:	7bbb      	ldrb	r3, [r7, #14]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d105      	bne.n	80074e4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	220d      	movs	r2, #13
 80074e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80074e2:	e043      	b.n	800756c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d103      	bne.n	80074f2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2209      	movs	r2, #9
 80074ee:	761a      	strb	r2, [r3, #24]
      break;
 80074f0:	e03c      	b.n	800756c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d139      	bne.n	800756c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	220b      	movs	r2, #11
 80074fc:	761a      	strb	r2, [r3, #24]
      break;
 80074fe:	e035      	b.n	800756c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	7e5b      	ldrb	r3, [r3, #25]
 8007504:	3301      	adds	r3, #1
 8007506:	b2da      	uxtb	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	765a      	strb	r2, [r3, #25]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	7e5b      	ldrb	r3, [r3, #25]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d806      	bhi.n	8007522 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007520:	e025      	b.n	800756e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007528:	2106      	movs	r1, #6
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	795b      	ldrb	r3, [r3, #5]
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f90c 	bl	8007758 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	791b      	ldrb	r3, [r3, #4]
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f906 	bl	8007758 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007552:	2302      	movs	r3, #2
 8007554:	73fb      	strb	r3, [r7, #15]
      break;
 8007556:	e00a      	b.n	800756e <USBH_HandleControl+0x2de>

    default:
      break;
 8007558:	bf00      	nop
 800755a:	e008      	b.n	800756e <USBH_HandleControl+0x2de>
      break;
 800755c:	bf00      	nop
 800755e:	e006      	b.n	800756e <USBH_HandleControl+0x2de>
      break;
 8007560:	bf00      	nop
 8007562:	e004      	b.n	800756e <USBH_HandleControl+0x2de>
      break;
 8007564:	bf00      	nop
 8007566:	e002      	b.n	800756e <USBH_HandleControl+0x2de>
      break;
 8007568:	bf00      	nop
 800756a:	e000      	b.n	800756e <USBH_HandleControl+0x2de>
      break;
 800756c:	bf00      	nop
  }

  return status;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b088      	sub	sp, #32
 800757c:	af04      	add	r7, sp, #16
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007586:	79f9      	ldrb	r1, [r7, #7]
 8007588:	2300      	movs	r3, #0
 800758a:	9303      	str	r3, [sp, #12]
 800758c:	2308      	movs	r3, #8
 800758e:	9302      	str	r3, [sp, #8]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	9301      	str	r3, [sp, #4]
 8007594:	2300      	movs	r3, #0
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	2300      	movs	r3, #0
 800759a:	2200      	movs	r2, #0
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fb46 	bl	8007c2e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af04      	add	r7, sp, #16
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	4611      	mov	r1, r2
 80075b8:	461a      	mov	r2, r3
 80075ba:	460b      	mov	r3, r1
 80075bc:	80fb      	strh	r3, [r7, #6]
 80075be:	4613      	mov	r3, r2
 80075c0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80075d0:	7979      	ldrb	r1, [r7, #5]
 80075d2:	7e3b      	ldrb	r3, [r7, #24]
 80075d4:	9303      	str	r3, [sp, #12]
 80075d6:	88fb      	ldrh	r3, [r7, #6]
 80075d8:	9302      	str	r3, [sp, #8]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	9301      	str	r3, [sp, #4]
 80075de:	2301      	movs	r3, #1
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	2300      	movs	r3, #0
 80075e4:	2200      	movs	r2, #0
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 fb21 	bl	8007c2e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b088      	sub	sp, #32
 80075fa:	af04      	add	r7, sp, #16
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	60b9      	str	r1, [r7, #8]
 8007600:	4611      	mov	r1, r2
 8007602:	461a      	mov	r2, r3
 8007604:	460b      	mov	r3, r1
 8007606:	80fb      	strh	r3, [r7, #6]
 8007608:	4613      	mov	r3, r2
 800760a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800760c:	7979      	ldrb	r1, [r7, #5]
 800760e:	2300      	movs	r3, #0
 8007610:	9303      	str	r3, [sp, #12]
 8007612:	88fb      	ldrh	r3, [r7, #6]
 8007614:	9302      	str	r3, [sp, #8]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	2301      	movs	r3, #1
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	2300      	movs	r3, #0
 8007620:	2201      	movs	r2, #1
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 fb03 	bl	8007c2e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007628:	2300      	movs	r3, #0

}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b088      	sub	sp, #32
 8007636:	af04      	add	r7, sp, #16
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	4611      	mov	r1, r2
 800763e:	461a      	mov	r2, r3
 8007640:	460b      	mov	r3, r1
 8007642:	80fb      	strh	r3, [r7, #6]
 8007644:	4613      	mov	r3, r2
 8007646:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007656:	7979      	ldrb	r1, [r7, #5]
 8007658:	7e3b      	ldrb	r3, [r7, #24]
 800765a:	9303      	str	r3, [sp, #12]
 800765c:	88fb      	ldrh	r3, [r7, #6]
 800765e:	9302      	str	r3, [sp, #8]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	2301      	movs	r3, #1
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	2302      	movs	r3, #2
 800766a:	2200      	movs	r2, #0
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 fade 	bl	8007c2e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af04      	add	r7, sp, #16
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	4611      	mov	r1, r2
 8007688:	461a      	mov	r2, r3
 800768a:	460b      	mov	r3, r1
 800768c:	80fb      	strh	r3, [r7, #6]
 800768e:	4613      	mov	r3, r2
 8007690:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007692:	7979      	ldrb	r1, [r7, #5]
 8007694:	2300      	movs	r3, #0
 8007696:	9303      	str	r3, [sp, #12]
 8007698:	88fb      	ldrh	r3, [r7, #6]
 800769a:	9302      	str	r3, [sp, #8]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	2301      	movs	r3, #1
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	2302      	movs	r3, #2
 80076a6:	2201      	movs	r2, #1
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fac0 	bl	8007c2e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af04      	add	r7, sp, #16
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	4608      	mov	r0, r1
 80076c2:	4611      	mov	r1, r2
 80076c4:	461a      	mov	r2, r3
 80076c6:	4603      	mov	r3, r0
 80076c8:	70fb      	strb	r3, [r7, #3]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70bb      	strb	r3, [r7, #2]
 80076ce:	4613      	mov	r3, r2
 80076d0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80076d2:	7878      	ldrb	r0, [r7, #1]
 80076d4:	78ba      	ldrb	r2, [r7, #2]
 80076d6:	78f9      	ldrb	r1, [r7, #3]
 80076d8:	8b3b      	ldrh	r3, [r7, #24]
 80076da:	9302      	str	r3, [sp, #8]
 80076dc:	7d3b      	ldrb	r3, [r7, #20]
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	7c3b      	ldrb	r3, [r7, #16]
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	4603      	mov	r3, r0
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa53 	bl	8007b92 <USBH_LL_OpenPipe>

  return USBH_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007702:	78fb      	ldrb	r3, [r7, #3]
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fa72 	bl	8007bf0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f836 	bl	8007794 <USBH_GetFreePipe>
 8007728:	4603      	mov	r3, r0
 800772a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800772c:	89fb      	ldrh	r3, [r7, #14]
 800772e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007732:	4293      	cmp	r3, r2
 8007734:	d00a      	beq.n	800774c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007736:	78fa      	ldrb	r2, [r7, #3]
 8007738:	89fb      	ldrh	r3, [r7, #14]
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007742:	6879      	ldr	r1, [r7, #4]
 8007744:	33e0      	adds	r3, #224	; 0xe0
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	440b      	add	r3, r1
 800774a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800774c:	89fb      	ldrh	r3, [r7, #14]
 800774e:	b2db      	uxtb	r3, r3
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	2b0f      	cmp	r3, #15
 8007768:	d80d      	bhi.n	8007786 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800776a:	78fb      	ldrb	r3, [r7, #3]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	33e0      	adds	r3, #224	; 0xe0
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	33e0      	adds	r3, #224	; 0xe0
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	440b      	add	r3, r1
 8007784:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80077a0:	2300      	movs	r3, #0
 80077a2:	73fb      	strb	r3, [r7, #15]
 80077a4:	e00f      	b.n	80077c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	33e0      	adds	r3, #224	; 0xe0
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	e007      	b.n	80077d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	3301      	adds	r3, #1
 80077c4:	73fb      	strb	r3, [r7, #15]
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	2b0f      	cmp	r3, #15
 80077ca:	d9ec      	bls.n	80077a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80077cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80077e0:	2201      	movs	r2, #1
 80077e2:	490e      	ldr	r1, [pc, #56]	; (800781c <MX_USB_HOST_Init+0x40>)
 80077e4:	480e      	ldr	r0, [pc, #56]	; (8007820 <MX_USB_HOST_Init+0x44>)
 80077e6:	f7fe fba5 	bl	8005f34 <USBH_Init>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80077f0:	f7f9 f8b4 	bl	800095c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80077f4:	490b      	ldr	r1, [pc, #44]	; (8007824 <MX_USB_HOST_Init+0x48>)
 80077f6:	480a      	ldr	r0, [pc, #40]	; (8007820 <MX_USB_HOST_Init+0x44>)
 80077f8:	f7fe fc2a 	bl	8006050 <USBH_RegisterClass>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007802:	f7f9 f8ab 	bl	800095c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007806:	4806      	ldr	r0, [pc, #24]	; (8007820 <MX_USB_HOST_Init+0x44>)
 8007808:	f7fe fcae 	bl	8006168 <USBH_Start>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007812:	f7f9 f8a3 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007816:	bf00      	nop
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	0800783d 	.word	0x0800783d
 8007820:	20000190 	.word	0x20000190
 8007824:	2000000c 	.word	0x2000000c

08007828 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800782c:	4802      	ldr	r0, [pc, #8]	; (8007838 <MX_USB_HOST_Process+0x10>)
 800782e:	f7fe fcab 	bl	8006188 <USBH_Process>
}
 8007832:	bf00      	nop
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20000190 	.word	0x20000190

0800783c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007848:	78fb      	ldrb	r3, [r7, #3]
 800784a:	3b01      	subs	r3, #1
 800784c:	2b04      	cmp	r3, #4
 800784e:	d819      	bhi.n	8007884 <USBH_UserProcess+0x48>
 8007850:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <USBH_UserProcess+0x1c>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	08007885 	.word	0x08007885
 800785c:	08007875 	.word	0x08007875
 8007860:	08007885 	.word	0x08007885
 8007864:	0800787d 	.word	0x0800787d
 8007868:	0800786d 	.word	0x0800786d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800786c:	4b09      	ldr	r3, [pc, #36]	; (8007894 <USBH_UserProcess+0x58>)
 800786e:	2203      	movs	r2, #3
 8007870:	701a      	strb	r2, [r3, #0]
  break;
 8007872:	e008      	b.n	8007886 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007874:	4b07      	ldr	r3, [pc, #28]	; (8007894 <USBH_UserProcess+0x58>)
 8007876:	2202      	movs	r2, #2
 8007878:	701a      	strb	r2, [r3, #0]
  break;
 800787a:	e004      	b.n	8007886 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800787c:	4b05      	ldr	r3, [pc, #20]	; (8007894 <USBH_UserProcess+0x58>)
 800787e:	2201      	movs	r2, #1
 8007880:	701a      	strb	r2, [r3, #0]
  break;
 8007882:	e000      	b.n	8007886 <USBH_UserProcess+0x4a>

  default:
  break;
 8007884:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20000568 	.word	0x20000568

08007898 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	; 0x28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078a0:	f107 0314 	add.w	r3, r7, #20
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	605a      	str	r2, [r3, #4]
 80078aa:	609a      	str	r2, [r3, #8]
 80078ac:	60da      	str	r2, [r3, #12]
 80078ae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078b8:	d147      	bne.n	800794a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078ba:	2300      	movs	r3, #0
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	4b25      	ldr	r3, [pc, #148]	; (8007954 <HAL_HCD_MspInit+0xbc>)
 80078c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c2:	4a24      	ldr	r2, [pc, #144]	; (8007954 <HAL_HCD_MspInit+0xbc>)
 80078c4:	f043 0301 	orr.w	r3, r3, #1
 80078c8:	6313      	str	r3, [r2, #48]	; 0x30
 80078ca:	4b22      	ldr	r3, [pc, #136]	; (8007954 <HAL_HCD_MspInit+0xbc>)
 80078cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	613b      	str	r3, [r7, #16]
 80078d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80078d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078dc:	2300      	movs	r3, #0
 80078de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80078e4:	f107 0314 	add.w	r3, r7, #20
 80078e8:	4619      	mov	r1, r3
 80078ea:	481b      	ldr	r0, [pc, #108]	; (8007958 <HAL_HCD_MspInit+0xc0>)
 80078ec:	f7f9 fc4e 	bl	800118c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80078f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80078f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078f6:	2302      	movs	r3, #2
 80078f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078fe:	2300      	movs	r3, #0
 8007900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007902:	230a      	movs	r3, #10
 8007904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007906:	f107 0314 	add.w	r3, r7, #20
 800790a:	4619      	mov	r1, r3
 800790c:	4812      	ldr	r0, [pc, #72]	; (8007958 <HAL_HCD_MspInit+0xc0>)
 800790e:	f7f9 fc3d 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007912:	4b10      	ldr	r3, [pc, #64]	; (8007954 <HAL_HCD_MspInit+0xbc>)
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007916:	4a0f      	ldr	r2, [pc, #60]	; (8007954 <HAL_HCD_MspInit+0xbc>)
 8007918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791c:	6353      	str	r3, [r2, #52]	; 0x34
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
 8007922:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <HAL_HCD_MspInit+0xbc>)
 8007924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007926:	4a0b      	ldr	r2, [pc, #44]	; (8007954 <HAL_HCD_MspInit+0xbc>)
 8007928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800792c:	6453      	str	r3, [r2, #68]	; 0x44
 800792e:	4b09      	ldr	r3, [pc, #36]	; (8007954 <HAL_HCD_MspInit+0xbc>)
 8007930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800793a:	2200      	movs	r2, #0
 800793c:	2100      	movs	r1, #0
 800793e:	2043      	movs	r0, #67	; 0x43
 8007940:	f7f9 fb5b 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007944:	2043      	movs	r0, #67	; 0x43
 8007946:	f7f9 fb74 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800794a:	bf00      	nop
 800794c:	3728      	adds	r7, #40	; 0x28
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	40023800 	.word	0x40023800
 8007958:	40020000 	.word	0x40020000

0800795c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800796a:	4618      	mov	r0, r3
 800796c:	f7fe ffeb 	bl	8006946 <USBH_LL_IncTimer>
}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff f823 	bl	80069d2 <USBH_LL_Connect>
}
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7ff f82c 	bl	8006a00 <USBH_LL_Disconnect>
}
 80079a8:	bf00      	nop
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	460b      	mov	r3, r1
 80079ba:	70fb      	strb	r3, [r7, #3]
 80079bc:	4613      	mov	r3, r2
 80079be:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe ffdd 	bl	800699a <USBH_LL_PortEnabled>
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe ffdd 	bl	80069b6 <USBH_LL_PortDisabled>
}
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d12a      	bne.n	8007a6c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007a16:	4a18      	ldr	r2, [pc, #96]	; (8007a78 <USBH_LL_Init+0x74>)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a15      	ldr	r2, [pc, #84]	; (8007a78 <USBH_LL_Init+0x74>)
 8007a22:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a26:	4b14      	ldr	r3, [pc, #80]	; (8007a78 <USBH_LL_Init+0x74>)
 8007a28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a2c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007a2e:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <USBH_LL_Init+0x74>)
 8007a30:	2208      	movs	r2, #8
 8007a32:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007a34:	4b10      	ldr	r3, [pc, #64]	; (8007a78 <USBH_LL_Init+0x74>)
 8007a36:	2201      	movs	r2, #1
 8007a38:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a3a:	4b0f      	ldr	r3, [pc, #60]	; (8007a78 <USBH_LL_Init+0x74>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007a40:	4b0d      	ldr	r3, [pc, #52]	; (8007a78 <USBH_LL_Init+0x74>)
 8007a42:	2202      	movs	r2, #2
 8007a44:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a46:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <USBH_LL_Init+0x74>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007a4c:	480a      	ldr	r0, [pc, #40]	; (8007a78 <USBH_LL_Init+0x74>)
 8007a4e:	f7f9 fd6c 	bl	800152a <HAL_HCD_Init>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007a58:	f7f8 ff80 	bl	800095c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007a5c:	4806      	ldr	r0, [pc, #24]	; (8007a78 <USBH_LL_Init+0x74>)
 8007a5e:	f7fa f950 	bl	8001d02 <HAL_HCD_GetCurrentFrame>
 8007a62:	4603      	mov	r3, r0
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7fe ff5e 	bl	8006928 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	2000056c 	.word	0x2000056c

08007a7c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fa f8bf 	bl	8001c16 <HAL_HCD_Start>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f95c 	bl	8007d5c <USBH_Get_USB_Status>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fa f8c7 	bl	8001c5c <HAL_HCD_Stop>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 f941 	bl	8007d5c <USBH_Get_USB_Status>
 8007ada:	4603      	mov	r3, r0
 8007adc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007af0:	2301      	movs	r3, #1
 8007af2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fa f90f 	bl	8001d1e <HAL_HCD_GetCurrentSpeed>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d00c      	beq.n	8007b20 <USBH_LL_GetSpeed+0x38>
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d80d      	bhi.n	8007b26 <USBH_LL_GetSpeed+0x3e>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <USBH_LL_GetSpeed+0x2c>
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d003      	beq.n	8007b1a <USBH_LL_GetSpeed+0x32>
 8007b12:	e008      	b.n	8007b26 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73fb      	strb	r3, [r7, #15]
    break;
 8007b18:	e008      	b.n	8007b2c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b1e:	e005      	b.n	8007b2c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007b20:	2302      	movs	r3, #2
 8007b22:	73fb      	strb	r3, [r7, #15]
    break;
 8007b24:	e002      	b.n	8007b2c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007b26:	2301      	movs	r3, #1
 8007b28:	73fb      	strb	r3, [r7, #15]
    break;
 8007b2a:	bf00      	nop
  }
  return  speed;
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fa f8a2 	bl	8001c96 <HAL_HCD_ResetPort>
 8007b52:	4603      	mov	r3, r0
 8007b54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 f8ff 	bl	8007d5c <USBH_Get_USB_Status>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b7e:	78fa      	ldrb	r2, [r7, #3]
 8007b80:	4611      	mov	r1, r2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fa f8a9 	bl	8001cda <HAL_HCD_HC_GetXferCount>
 8007b88:	4603      	mov	r3, r0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b92:	b590      	push	{r4, r7, lr}
 8007b94:	b089      	sub	sp, #36	; 0x24
 8007b96:	af04      	add	r7, sp, #16
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	4608      	mov	r0, r1
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	70fb      	strb	r3, [r7, #3]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	70bb      	strb	r3, [r7, #2]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007bba:	787c      	ldrb	r4, [r7, #1]
 8007bbc:	78ba      	ldrb	r2, [r7, #2]
 8007bbe:	78f9      	ldrb	r1, [r7, #3]
 8007bc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bc2:	9302      	str	r3, [sp, #8]
 8007bc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	f7f9 fd0c 	bl	80015ee <HAL_HCD_HC_Init>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 f8bd 	bl	8007d5c <USBH_Get_USB_Status>
 8007be2:	4603      	mov	r3, r0
 8007be4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007be6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd90      	pop	{r4, r7, pc}

08007bf0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7f9 fd7c 	bl	800170c <HAL_HCD_HC_Halt>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 f89e 	bl	8007d5c <USBH_Get_USB_Status>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007c2e:	b590      	push	{r4, r7, lr}
 8007c30:	b089      	sub	sp, #36	; 0x24
 8007c32:	af04      	add	r7, sp, #16
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	4608      	mov	r0, r1
 8007c38:	4611      	mov	r1, r2
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	70fb      	strb	r3, [r7, #3]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70bb      	strb	r3, [r7, #2]
 8007c44:	4613      	mov	r3, r2
 8007c46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007c56:	787c      	ldrb	r4, [r7, #1]
 8007c58:	78ba      	ldrb	r2, [r7, #2]
 8007c5a:	78f9      	ldrb	r1, [r7, #3]
 8007c5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c60:	9303      	str	r3, [sp, #12]
 8007c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c64:	9302      	str	r3, [sp, #8]
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c68:	9301      	str	r3, [sp, #4]
 8007c6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	4623      	mov	r3, r4
 8007c72:	f7f9 fd6f 	bl	8001754 <HAL_HCD_HC_SubmitRequest>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 f86d 	bl	8007d5c <USBH_Get_USB_Status>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd90      	pop	{r4, r7, pc}

08007c90 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fa f803 	bl	8001cb2 <HAL_HCD_HC_GetURBState>
 8007cac:	4603      	mov	r3, r0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d103      	bne.n	8007cd4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007ccc:	78fb      	ldrb	r3, [r7, #3]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 f870 	bl	8007db4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007cd4:	20c8      	movs	r0, #200	; 0xc8
 8007cd6:	f7f9 f891 	bl	8000dfc <HAL_Delay>
  return USBH_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007cfa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	212c      	movs	r1, #44	; 0x2c
 8007d02:	fb01 f303 	mul.w	r3, r1, r3
 8007d06:	4413      	add	r3, r2
 8007d08:	333b      	adds	r3, #59	; 0x3b
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d009      	beq.n	8007d24 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	212c      	movs	r1, #44	; 0x2c
 8007d16:	fb01 f303 	mul.w	r3, r1, r3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	3354      	adds	r3, #84	; 0x54
 8007d1e:	78ba      	ldrb	r2, [r7, #2]
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	e008      	b.n	8007d36 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	212c      	movs	r1, #44	; 0x2c
 8007d2a:	fb01 f303 	mul.w	r3, r1, r3
 8007d2e:	4413      	add	r3, r2
 8007d30:	3355      	adds	r3, #85	; 0x55
 8007d32:	78ba      	ldrb	r2, [r7, #2]
 8007d34:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7f9 f855 	bl	8000dfc <HAL_Delay>
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d817      	bhi.n	8007da0 <USBH_Get_USB_Status+0x44>
 8007d70:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <USBH_Get_USB_Status+0x1c>)
 8007d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d76:	bf00      	nop
 8007d78:	08007d89 	.word	0x08007d89
 8007d7c:	08007d8f 	.word	0x08007d8f
 8007d80:	08007d95 	.word	0x08007d95
 8007d84:	08007d9b 	.word	0x08007d9b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d8c:	e00b      	b.n	8007da6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007d8e:	2302      	movs	r3, #2
 8007d90:	73fb      	strb	r3, [r7, #15]
    break;
 8007d92:	e008      	b.n	8007da6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
    break;
 8007d98:	e005      	b.n	8007da6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d9e:	e002      	b.n	8007da6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007da0:	2302      	movs	r3, #2
 8007da2:	73fb      	strb	r3, [r7, #15]
    break;
 8007da4:	bf00      	nop
  }
  return usb_status;
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007dbe:	79fb      	ldrb	r3, [r7, #7]
 8007dc0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d102      	bne.n	8007dce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]
 8007dcc:	e001      	b.n	8007dd2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	4803      	ldr	r0, [pc, #12]	; (8007de8 <MX_DriverVbusFS+0x34>)
 8007dda:	f7f9 fb73 	bl	80014c4 <HAL_GPIO_WritePin>
}
 8007dde:	bf00      	nop
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	40020800 	.word	0x40020800

08007dec <malloc>:
 8007dec:	4b02      	ldr	r3, [pc, #8]	; (8007df8 <malloc+0xc>)
 8007dee:	4601      	mov	r1, r0
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	f000 b82b 	b.w	8007e4c <_malloc_r>
 8007df6:	bf00      	nop
 8007df8:	20000078 	.word	0x20000078

08007dfc <free>:
 8007dfc:	4b02      	ldr	r3, [pc, #8]	; (8007e08 <free+0xc>)
 8007dfe:	4601      	mov	r1, r0
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	f000 b8f3 	b.w	8007fec <_free_r>
 8007e06:	bf00      	nop
 8007e08:	20000078 	.word	0x20000078

08007e0c <sbrk_aligned>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	4e0e      	ldr	r6, [pc, #56]	; (8007e48 <sbrk_aligned+0x3c>)
 8007e10:	460c      	mov	r4, r1
 8007e12:	6831      	ldr	r1, [r6, #0]
 8007e14:	4605      	mov	r5, r0
 8007e16:	b911      	cbnz	r1, 8007e1e <sbrk_aligned+0x12>
 8007e18:	f000 f8ac 	bl	8007f74 <_sbrk_r>
 8007e1c:	6030      	str	r0, [r6, #0]
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4628      	mov	r0, r5
 8007e22:	f000 f8a7 	bl	8007f74 <_sbrk_r>
 8007e26:	1c43      	adds	r3, r0, #1
 8007e28:	d00a      	beq.n	8007e40 <sbrk_aligned+0x34>
 8007e2a:	1cc4      	adds	r4, r0, #3
 8007e2c:	f024 0403 	bic.w	r4, r4, #3
 8007e30:	42a0      	cmp	r0, r4
 8007e32:	d007      	beq.n	8007e44 <sbrk_aligned+0x38>
 8007e34:	1a21      	subs	r1, r4, r0
 8007e36:	4628      	mov	r0, r5
 8007e38:	f000 f89c 	bl	8007f74 <_sbrk_r>
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d101      	bne.n	8007e44 <sbrk_aligned+0x38>
 8007e40:	f04f 34ff 	mov.w	r4, #4294967295
 8007e44:	4620      	mov	r0, r4
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	20000874 	.word	0x20000874

08007e4c <_malloc_r>:
 8007e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e50:	1ccd      	adds	r5, r1, #3
 8007e52:	f025 0503 	bic.w	r5, r5, #3
 8007e56:	3508      	adds	r5, #8
 8007e58:	2d0c      	cmp	r5, #12
 8007e5a:	bf38      	it	cc
 8007e5c:	250c      	movcc	r5, #12
 8007e5e:	2d00      	cmp	r5, #0
 8007e60:	4607      	mov	r7, r0
 8007e62:	db01      	blt.n	8007e68 <_malloc_r+0x1c>
 8007e64:	42a9      	cmp	r1, r5
 8007e66:	d905      	bls.n	8007e74 <_malloc_r+0x28>
 8007e68:	230c      	movs	r3, #12
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	2600      	movs	r6, #0
 8007e6e:	4630      	mov	r0, r6
 8007e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f48 <_malloc_r+0xfc>
 8007e78:	f000 f868 	bl	8007f4c <__malloc_lock>
 8007e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e80:	461c      	mov	r4, r3
 8007e82:	bb5c      	cbnz	r4, 8007edc <_malloc_r+0x90>
 8007e84:	4629      	mov	r1, r5
 8007e86:	4638      	mov	r0, r7
 8007e88:	f7ff ffc0 	bl	8007e0c <sbrk_aligned>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	4604      	mov	r4, r0
 8007e90:	d155      	bne.n	8007f3e <_malloc_r+0xf2>
 8007e92:	f8d8 4000 	ldr.w	r4, [r8]
 8007e96:	4626      	mov	r6, r4
 8007e98:	2e00      	cmp	r6, #0
 8007e9a:	d145      	bne.n	8007f28 <_malloc_r+0xdc>
 8007e9c:	2c00      	cmp	r4, #0
 8007e9e:	d048      	beq.n	8007f32 <_malloc_r+0xe6>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	eb04 0903 	add.w	r9, r4, r3
 8007eaa:	f000 f863 	bl	8007f74 <_sbrk_r>
 8007eae:	4581      	cmp	r9, r0
 8007eb0:	d13f      	bne.n	8007f32 <_malloc_r+0xe6>
 8007eb2:	6821      	ldr	r1, [r4, #0]
 8007eb4:	1a6d      	subs	r5, r5, r1
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f7ff ffa7 	bl	8007e0c <sbrk_aligned>
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	d037      	beq.n	8007f32 <_malloc_r+0xe6>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	442b      	add	r3, r5
 8007ec6:	6023      	str	r3, [r4, #0]
 8007ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d038      	beq.n	8007f42 <_malloc_r+0xf6>
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	42a2      	cmp	r2, r4
 8007ed4:	d12b      	bne.n	8007f2e <_malloc_r+0xe2>
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	605a      	str	r2, [r3, #4]
 8007eda:	e00f      	b.n	8007efc <_malloc_r+0xb0>
 8007edc:	6822      	ldr	r2, [r4, #0]
 8007ede:	1b52      	subs	r2, r2, r5
 8007ee0:	d41f      	bmi.n	8007f22 <_malloc_r+0xd6>
 8007ee2:	2a0b      	cmp	r2, #11
 8007ee4:	d917      	bls.n	8007f16 <_malloc_r+0xca>
 8007ee6:	1961      	adds	r1, r4, r5
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	6025      	str	r5, [r4, #0]
 8007eec:	bf18      	it	ne
 8007eee:	6059      	strne	r1, [r3, #4]
 8007ef0:	6863      	ldr	r3, [r4, #4]
 8007ef2:	bf08      	it	eq
 8007ef4:	f8c8 1000 	streq.w	r1, [r8]
 8007ef8:	5162      	str	r2, [r4, r5]
 8007efa:	604b      	str	r3, [r1, #4]
 8007efc:	4638      	mov	r0, r7
 8007efe:	f104 060b 	add.w	r6, r4, #11
 8007f02:	f000 f829 	bl	8007f58 <__malloc_unlock>
 8007f06:	f026 0607 	bic.w	r6, r6, #7
 8007f0a:	1d23      	adds	r3, r4, #4
 8007f0c:	1af2      	subs	r2, r6, r3
 8007f0e:	d0ae      	beq.n	8007e6e <_malloc_r+0x22>
 8007f10:	1b9b      	subs	r3, r3, r6
 8007f12:	50a3      	str	r3, [r4, r2]
 8007f14:	e7ab      	b.n	8007e6e <_malloc_r+0x22>
 8007f16:	42a3      	cmp	r3, r4
 8007f18:	6862      	ldr	r2, [r4, #4]
 8007f1a:	d1dd      	bne.n	8007ed8 <_malloc_r+0x8c>
 8007f1c:	f8c8 2000 	str.w	r2, [r8]
 8007f20:	e7ec      	b.n	8007efc <_malloc_r+0xb0>
 8007f22:	4623      	mov	r3, r4
 8007f24:	6864      	ldr	r4, [r4, #4]
 8007f26:	e7ac      	b.n	8007e82 <_malloc_r+0x36>
 8007f28:	4634      	mov	r4, r6
 8007f2a:	6876      	ldr	r6, [r6, #4]
 8007f2c:	e7b4      	b.n	8007e98 <_malloc_r+0x4c>
 8007f2e:	4613      	mov	r3, r2
 8007f30:	e7cc      	b.n	8007ecc <_malloc_r+0x80>
 8007f32:	230c      	movs	r3, #12
 8007f34:	603b      	str	r3, [r7, #0]
 8007f36:	4638      	mov	r0, r7
 8007f38:	f000 f80e 	bl	8007f58 <__malloc_unlock>
 8007f3c:	e797      	b.n	8007e6e <_malloc_r+0x22>
 8007f3e:	6025      	str	r5, [r4, #0]
 8007f40:	e7dc      	b.n	8007efc <_malloc_r+0xb0>
 8007f42:	605b      	str	r3, [r3, #4]
 8007f44:	deff      	udf	#255	; 0xff
 8007f46:	bf00      	nop
 8007f48:	20000870 	.word	0x20000870

08007f4c <__malloc_lock>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	; (8007f54 <__malloc_lock+0x8>)
 8007f4e:	f000 b84b 	b.w	8007fe8 <__retarget_lock_acquire_recursive>
 8007f52:	bf00      	nop
 8007f54:	200009b4 	.word	0x200009b4

08007f58 <__malloc_unlock>:
 8007f58:	4801      	ldr	r0, [pc, #4]	; (8007f60 <__malloc_unlock+0x8>)
 8007f5a:	f000 b846 	b.w	8007fea <__retarget_lock_release_recursive>
 8007f5e:	bf00      	nop
 8007f60:	200009b4 	.word	0x200009b4

08007f64 <memset>:
 8007f64:	4402      	add	r2, r0
 8007f66:	4603      	mov	r3, r0
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d100      	bne.n	8007f6e <memset+0xa>
 8007f6c:	4770      	bx	lr
 8007f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f72:	e7f9      	b.n	8007f68 <memset+0x4>

08007f74 <_sbrk_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4d06      	ldr	r5, [pc, #24]	; (8007f90 <_sbrk_r+0x1c>)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	4608      	mov	r0, r1
 8007f7e:	602b      	str	r3, [r5, #0]
 8007f80:	f7f8 fe58 	bl	8000c34 <_sbrk>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	d102      	bne.n	8007f8e <_sbrk_r+0x1a>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	b103      	cbz	r3, 8007f8e <_sbrk_r+0x1a>
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	200009b0 	.word	0x200009b0

08007f94 <__errno>:
 8007f94:	4b01      	ldr	r3, [pc, #4]	; (8007f9c <__errno+0x8>)
 8007f96:	6818      	ldr	r0, [r3, #0]
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	20000078 	.word	0x20000078

08007fa0 <__libc_init_array>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	4d0d      	ldr	r5, [pc, #52]	; (8007fd8 <__libc_init_array+0x38>)
 8007fa4:	4c0d      	ldr	r4, [pc, #52]	; (8007fdc <__libc_init_array+0x3c>)
 8007fa6:	1b64      	subs	r4, r4, r5
 8007fa8:	10a4      	asrs	r4, r4, #2
 8007faa:	2600      	movs	r6, #0
 8007fac:	42a6      	cmp	r6, r4
 8007fae:	d109      	bne.n	8007fc4 <__libc_init_array+0x24>
 8007fb0:	4d0b      	ldr	r5, [pc, #44]	; (8007fe0 <__libc_init_array+0x40>)
 8007fb2:	4c0c      	ldr	r4, [pc, #48]	; (8007fe4 <__libc_init_array+0x44>)
 8007fb4:	f000 f866 	bl	8008084 <_init>
 8007fb8:	1b64      	subs	r4, r4, r5
 8007fba:	10a4      	asrs	r4, r4, #2
 8007fbc:	2600      	movs	r6, #0
 8007fbe:	42a6      	cmp	r6, r4
 8007fc0:	d105      	bne.n	8007fce <__libc_init_array+0x2e>
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}
 8007fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fc8:	4798      	blx	r3
 8007fca:	3601      	adds	r6, #1
 8007fcc:	e7ee      	b.n	8007fac <__libc_init_array+0xc>
 8007fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd2:	4798      	blx	r3
 8007fd4:	3601      	adds	r6, #1
 8007fd6:	e7f2      	b.n	8007fbe <__libc_init_array+0x1e>
 8007fd8:	080080c0 	.word	0x080080c0
 8007fdc:	080080c0 	.word	0x080080c0
 8007fe0:	080080c0 	.word	0x080080c0
 8007fe4:	080080c4 	.word	0x080080c4

08007fe8 <__retarget_lock_acquire_recursive>:
 8007fe8:	4770      	bx	lr

08007fea <__retarget_lock_release_recursive>:
 8007fea:	4770      	bx	lr

08007fec <_free_r>:
 8007fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fee:	2900      	cmp	r1, #0
 8007ff0:	d044      	beq.n	800807c <_free_r+0x90>
 8007ff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff6:	9001      	str	r0, [sp, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f1a1 0404 	sub.w	r4, r1, #4
 8007ffe:	bfb8      	it	lt
 8008000:	18e4      	addlt	r4, r4, r3
 8008002:	f7ff ffa3 	bl	8007f4c <__malloc_lock>
 8008006:	4a1e      	ldr	r2, [pc, #120]	; (8008080 <_free_r+0x94>)
 8008008:	9801      	ldr	r0, [sp, #4]
 800800a:	6813      	ldr	r3, [r2, #0]
 800800c:	b933      	cbnz	r3, 800801c <_free_r+0x30>
 800800e:	6063      	str	r3, [r4, #4]
 8008010:	6014      	str	r4, [r2, #0]
 8008012:	b003      	add	sp, #12
 8008014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008018:	f7ff bf9e 	b.w	8007f58 <__malloc_unlock>
 800801c:	42a3      	cmp	r3, r4
 800801e:	d908      	bls.n	8008032 <_free_r+0x46>
 8008020:	6825      	ldr	r5, [r4, #0]
 8008022:	1961      	adds	r1, r4, r5
 8008024:	428b      	cmp	r3, r1
 8008026:	bf01      	itttt	eq
 8008028:	6819      	ldreq	r1, [r3, #0]
 800802a:	685b      	ldreq	r3, [r3, #4]
 800802c:	1949      	addeq	r1, r1, r5
 800802e:	6021      	streq	r1, [r4, #0]
 8008030:	e7ed      	b.n	800800e <_free_r+0x22>
 8008032:	461a      	mov	r2, r3
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	b10b      	cbz	r3, 800803c <_free_r+0x50>
 8008038:	42a3      	cmp	r3, r4
 800803a:	d9fa      	bls.n	8008032 <_free_r+0x46>
 800803c:	6811      	ldr	r1, [r2, #0]
 800803e:	1855      	adds	r5, r2, r1
 8008040:	42a5      	cmp	r5, r4
 8008042:	d10b      	bne.n	800805c <_free_r+0x70>
 8008044:	6824      	ldr	r4, [r4, #0]
 8008046:	4421      	add	r1, r4
 8008048:	1854      	adds	r4, r2, r1
 800804a:	42a3      	cmp	r3, r4
 800804c:	6011      	str	r1, [r2, #0]
 800804e:	d1e0      	bne.n	8008012 <_free_r+0x26>
 8008050:	681c      	ldr	r4, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	6053      	str	r3, [r2, #4]
 8008056:	440c      	add	r4, r1
 8008058:	6014      	str	r4, [r2, #0]
 800805a:	e7da      	b.n	8008012 <_free_r+0x26>
 800805c:	d902      	bls.n	8008064 <_free_r+0x78>
 800805e:	230c      	movs	r3, #12
 8008060:	6003      	str	r3, [r0, #0]
 8008062:	e7d6      	b.n	8008012 <_free_r+0x26>
 8008064:	6825      	ldr	r5, [r4, #0]
 8008066:	1961      	adds	r1, r4, r5
 8008068:	428b      	cmp	r3, r1
 800806a:	bf04      	itt	eq
 800806c:	6819      	ldreq	r1, [r3, #0]
 800806e:	685b      	ldreq	r3, [r3, #4]
 8008070:	6063      	str	r3, [r4, #4]
 8008072:	bf04      	itt	eq
 8008074:	1949      	addeq	r1, r1, r5
 8008076:	6021      	streq	r1, [r4, #0]
 8008078:	6054      	str	r4, [r2, #4]
 800807a:	e7ca      	b.n	8008012 <_free_r+0x26>
 800807c:	b003      	add	sp, #12
 800807e:	bd30      	pop	{r4, r5, pc}
 8008080:	20000870 	.word	0x20000870

08008084 <_init>:
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	bf00      	nop
 8008088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800808a:	bc08      	pop	{r3}
 800808c:	469e      	mov	lr, r3
 800808e:	4770      	bx	lr

08008090 <_fini>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	bf00      	nop
 8008094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008096:	bc08      	pop	{r3}
 8008098:	469e      	mov	lr, r3
 800809a:	4770      	bx	lr
